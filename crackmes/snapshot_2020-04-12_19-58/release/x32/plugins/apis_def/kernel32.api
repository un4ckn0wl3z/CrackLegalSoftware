[CheckRemoteDebuggerPresent]
1=[ProcessHandle] hProcess
2=PBOOL pbDebuggerPresent
ParamCount=2
Header=windows.h.api;
@=CheckRemoteDebuggerPresent
[ContinueDebugEvent]
1=DWORD dwProcessId
2=DWORD dwThreadId
3=[ContinueStatusFlag] dwContinueStatus
ParamCount=3
Header=kernel32.h.api;
@=ContinueDebugEvent
[CopyExtendedContext]
1=PCONTEXT_EX Destination
2=DWORD ContextFlags
3=PCONTEXT_EX Source
ParamCount=3
Header=kernel32.h.api;
@=CopyExtendedContext
[DebugActiveProcess]
1=DWORD dwProcessId
ParamCount=1
@=DebugActiveProcess
[DebugActiveProcessStop]
1=DWORD dwProcessId
ParamCount=1
@=DebugActiveProcessStop
[DebugBreak]
ParamCount=0
@=DebugBreak
[DebugBreakProcess]
1=HANDLE Process
ParamCount=1
Header=windows.h.api;
@=DebugBreakProcess
[DebugSetProcessKillOnExit]
1=BOOL KillOnExit
ParamCount=1
@=DebugSetProcessKillOnExit
[FatalExit]
1=int ExitCode
ParamCount=1
@=FatalExit
[FlushInstructionCache]
1=[ProcessHandle] hProcess
2=LPCVOID lpBaseAddress
3=SIZE_T dwSize
ParamCount=3
Header=windows.h.api;
@=FlushInstructionCache
[GetEnabledExtendedFeatures]
1=DWORD64 FeatureMask
ParamCount=1
@=GetEnabledExtendedFeatures
[GetExtendedContextLength]
1=DWORD ContextFlags
2=PDWORD ContextLength
ParamCount=2
@=GetExtendedContextLength
[GetExtendedFeaturesMask]
1=PCONTEXT_EX ContextEx
ParamCount=1
Header=kernel32.h.api;
@=GetExtendedFeaturesMask
[GetThreadContext]
1=[ThreadHandle] hThread
2=LPCONTEXT lpContext
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=GetThreadContext
[GetThreadSelectorEntry]
1=[ThreadHandle] hThread
2=DWORD dwSelector
3=LPLDT_ENTRY lpSelectorEntry
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=GetThreadSelectorEntry
[InitializeExtendedContext]
1=PVOID Context
2=DWORD ContextFlags
3=PCONTEXT_EX* ContextEx
ParamCount=3
Header=kernel32.h.api;
@=InitializeExtendedContext
[IsDebuggerPresent]
ParamCount=0
@=IsDebuggerPresent
[LocateExtendedFeature]
1=PCONTEXT_EX ContextEx
2=DWORD FeatureId
3=PDWORD Length
ParamCount=3
Header=kernel32.h.api;
@=LocateExtendedFeature
[LocateLegacyContext]
1=PCONTEXT_EX ContextEx
2=PDWORD Length
ParamCount=2
Header=kernel32.h.api;
@=LocateLegacyContext
[OutputDebugString]
1=LPCTSTR lpOutputString
ParamCount=1
@=OutputDebugString
[ReadProcessMemory]
1=[ProcessHandle] hProcess
2=LPCVOID lpBaseAddress
3=LPVOID lpBuffer
4=SIZE_T nSize
5=SIZE_T* lpNumberOfBytesRead
ParamCount=5
Header=windows.h.api;
@=ReadProcessMemory
[SetExtendedFeaturesMask]
1=PCONTEXT_EX ContextEx
2=DWORD64 FeatureMask
ParamCount=2
Header=kernel32.h.api;
@=SetExtendedFeaturesMask
[SetThreadContext]
1=[ThreadHandle] hThread
2=CONTEXT* lpContext
ParamCount=2
Header=windows.h.api;
@=SetThreadContext
[WaitForDebugEvent]
1=LPDEBUG_EVENT lpDebugEvent
2=[WaitTimeout] dwMilliseconds
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=WaitForDebugEvent
[Wow64GetThreadContext]
1=[ThreadHandle] hThread
2=PWOW64_CONTEXT lpContext
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=Wow64GetThreadContext
[Wow64GetThreadSelectorEntry]
1=[ThreadHandle] hThread
2=DWORD dwSelector
3=PWOW64_LDT_ENTRY lpSelectorEntry
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=Wow64GetThreadSelectorEntry
[Wow64SetThreadContext]
1=[ThreadHandle] hThread
2=WOW64_CONTEXT* lpContext
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=Wow64SetThreadContext
[WriteProcessMemory]
1=[ProcessHandle] hProcess
2=LPVOID lpBaseAddress
3=LPCVOID lpBuffer
4=SIZE_T nSize
5=SIZE_T* lpNumberOfBytesWritten
ParamCount=5
Header=windows.h.api;
@=WriteProcessMemory
[AddDllDirectory]
1=PCWSTR NewDirectory
ParamCount=1
@=AddDllDirectory
[DisableThreadLibraryCalls]
1=HMODULE hModule
ParamCount=1
@=DisableThreadLibraryCalls
[FreeLibrary]
1=HMODULE hModule
ParamCount=1
@=FreeLibrary
[FreeLibraryAndExitThread]
1=HMODULE hModule
2=DWORD dwExitCode
ParamCount=2
@=FreeLibraryAndExitThread
[GetDllDirectory]
1=DWORD nBufferLength
2=LPTSTR lpBuffer
ParamCount=2
@=GetDllDirectory
[GetModuleFileName]
1=HMODULE hModule
2=LPTSTR lpFilename
3=DWORD nSize
ParamCount=3
@=GetModuleFileName
[GetModuleHandle]
1=LPCTSTR lpModuleName
ParamCount=1
@=GetModuleHandle
[GetModuleHandleEx]
1=[GetModuleHandleExFlags] dwFlags
2=LPCTSTR lpModuleName
3=HMODULE* phModule
ParamCount=3
Header=kernel32.h.api;
@=GetModuleHandleEx
[GetProcAddress]
1=HMODULE hModule
2=LPCSTR lpProcName
ParamCount=2
@=GetProcAddress
[LoadLibrary]
1=LPCTSTR lpFileName
ParamCount=1
@=LoadLibrary
[LoadLibraryEx]
1=LPCTSTR lpFileName
2=HANDLE hFile
3=[LoadLibraryExFlags] dwFlags
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=LoadLibraryEx
[LoadModule]
1=LPCSTR lpModuleName
2=LPVOID lpParameterBlock
ParamCount=2
@=LoadModule
[LoadPackagedLibrary]
1=LPCWSTR lpwLibFileName
2=DWORD Reserved
ParamCount=2
@=LoadPackagedLibrary
[RemoveDllDirectory]
1=DLL_DIRECTORY_COOKIE Cookie
ParamCount=1
Header=kernel32.h.api;
@=RemoveDllDirectory
[SetDefaultDllDirectories]
1=[LOAD_LIBRARY_SEARCH_FLAGS] DirectoryFlags
ParamCount=1
Header=kernel32.h.api;
@=SetDefaultDllDirectories
[SetDllDirectory]
1=LPCTSTR lpPathName
ParamCount=1
@=SetDllDirectory
[CreateToolhelp32Snapshot]
1=[CreateToolhelp32SnapshotFlags] dwFlags
2=DWORD th32ProcessID
ParamCount=2
Header=kernel32.h.api;
@=CreateToolhelp32Snapshot
[Heap32First]
1=LPHEAPENTRY32 lphe
2=DWORD th32ProcessID
3=ULONG_PTR th32HeapID
ParamCount=3
Header=kernel32.h.api;
@=Heap32First
[Heap32ListFirst]
1=HANDLE hSnapshot
2=LPHEAPLIST32 lphl
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=Heap32ListFirst
[Heap32ListNext]
1=HANDLE hSnapshot
2=LPHEAPLIST32 lphl
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=Heap32ListNext
[Heap32Next]
1=LPHEAPENTRY32 lphe
ParamCount=1
Header=kernel32.h.api;
@=Heap32Next
[Module32First]
1=HANDLE hSnapshot
2=LPMODULEENTRY32 lpme
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=Module32First
[Module32Next]
1=HANDLE hSnapshot
2=LPMODULEENTRY32 lpme
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=Module32Next
[Process32First]
1=HANDLE hSnapshot
2=LPPROCESSENTRY32 lppe
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=Process32First
[Process32Next]
1=HANDLE hSnapshot
2=LPPROCESSENTRY32 lppe
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=Process32Next
[Thread32First]
1=HANDLE hSnapshot
2=LPTHREADENTRY32 lpte
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=Thread32First
[Thread32Next]
1=HANDLE hSnapshot
2=LPTHREADENTRY32 lpte
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=Thread32Next
[Toolhelp32ReadProcessMemory]
1=DWORD th32ProcessID
2=LPCVOID lpBaseAddress
3=LPVOID lpBuffer
4=SIZE_T cbRead
5=SIZE_T lpNumberOfBytesRead
ParamCount=5
@=Toolhelp32ReadProcessMemory
[ApplicationRecoveryFinished]
1=BOOL bSuccess
ParamCount=1
@=ApplicationRecoveryFinished
[ApplicationRecoveryInProgress]
1=PBOOL pbCanceled
ParamCount=1
@=ApplicationRecoveryInProgress
[GetApplicationRecoveryCallback]
1=[ProcessHandle] hProcess
2=APPLICATION_RECOVERY_CALLBACK* pRecoveryCallback
3=PVOID* ppvParameter
4=DWORD dwPingInterval
5=DWORD dwFlags
ParamCount=5
Header=kernel32.h.api;windows.h.api;
@=GetApplicationRecoveryCallback
[GetApplicationRestartSettings]
1=[ProcessHandle] hProcess
2=PWSTR pwzCommandline
3=PDWORD pcchSize
4=PDWORD pdwFlags
ParamCount=4
Header=windows.h.api;
@=GetApplicationRestartSettings
[RegisterApplicationRecoveryCallback]
1=APPLICATION_RECOVERY_CALLBACK pRecoveryCallback
2=PVOID pvParameter
3=DWORD dwPingInterval
4=[ApplicationRestartFlags] dwFlags
ParamCount=4
Header=kernel32.h.api;
@=RegisterApplicationRecoveryCallback
[RegisterApplicationRestart]
1=PCWSTR pwzCommandline
2=[ApplicationRestartFlags] dwFlags
ParamCount=2
Header=kernel32.h.api;
@=RegisterApplicationRestart
[UnregisterApplicationRecoveryCallback]
ParamCount=0
@=UnregisterApplicationRecoveryCallback
[UnregisterApplicationRestart]
ParamCount=0
@=UnregisterApplicationRestart
[GetPrivateProfileInt]
1=LPCTSTR lpAppName
2=LPCTSTR lpKeyName
3=INT nDefault
4=LPCTSTR lpFileName
ParamCount=4
@=GetPrivateProfileInt
[GetPrivateProfileSection]
1=LPCTSTR lpAppName
2=LPTSTR lpReturnedString
3=DWORD nSize
4=LPCTSTR lpFileName
ParamCount=4
@=GetPrivateProfileSection
[GetPrivateProfileSectionNames]
1=LPTSTR lpszReturnBuffer
2=DWORD nSize
3=LPCTSTR lpFileName
ParamCount=3
@=GetPrivateProfileSectionNames
[GetPrivateProfileString]
1=LPCTSTR lpAppName
2=LPCTSTR lpKeyName
3=LPCTSTR lpDefault
4=LPTSTR lpReturnedString
5=DWORD nSize
6=LPCTSTR lpFileName
ParamCount=6
@=GetPrivateProfileString
[GetPrivateProfileStruct]
1=LPCTSTR lpszSection
2=LPCTSTR lpszKey
3=LPVOID lpStruct
4=UINT uSizeStruct
5=LPCTSTR szFile
ParamCount=5
@=GetPrivateProfileStruct
[GetProfileInt]
1=LPCTSTR lpAppName
2=LPCTSTR lpKeyName
3=INT nDefault
ParamCount=3
@=GetProfileInt
[GetProfileSection]
1=LPCTSTR lpAppName
2=LPTSTR lpReturnedString
3=DWORD nSize
ParamCount=3
@=GetProfileSection
[GetProfileString]
1=LPCTSTR lpAppName
2=LPCTSTR lpKeyName
3=LPCTSTR lpDefault
4=LPTSTR lpReturnedString
5=DWORD nSize
ParamCount=5
@=GetProfileString
[WritePrivateProfileSection]
1=LPCTSTR lpAppName
2=LPCTSTR lpString
3=LPCTSTR lpFileName
ParamCount=3
@=WritePrivateProfileSection
[WritePrivateProfileString]
1=LPCTSTR lpAppName
2=LPCTSTR lpKeyName
3=LPCTSTR lpString
4=LPCTSTR lpFileName
ParamCount=4
@=WritePrivateProfileString
[WritePrivateProfileStruct]
1=LPCTSTR lpszSection
2=LPCTSTR lpszKey
3=LPVOID lpStruct
4=UINT uSizeStruct
5=LPCTSTR szFile
ParamCount=5
@=WritePrivateProfileStruct
[WriteProfileSection]
1=LPCTSTR lpAppName
2=LPCTSTR lpString
ParamCount=2
@=WriteProfileSection
[WriteProfileString]
1=LPCTSTR lpAppName
2=LPCTSTR lpKeyName
3=LPCTSTR lpString
ParamCount=3
@=WriteProfileString
[lopen]
1=LPCSTR lpPathName
2=int iReadWrite
ParamCount=2
@=lopen
[lcreat]
1=LPCSTR lpPathName
2=[lcreatAttribute] iAttribute
ParamCount=2
Header=kernel32.h.api;
@=lcreat
[lread]
1=[HFILE] hFile
2=LPVOID lpBuffer
3=UINT uBytes
ParamCount=3
Header=kernel32.h.api;
@=lread
[lwrite]
1=[HFILE] hFile
2=LPVOID lpBuffer
3=UINT uBytes
ParamCount=3
Header=kernel32.h.api;
@=lwrite
[hread]
1=[HFILE] hFile
2=LPVOID lpBuffer
3=LONG lBytes
ParamCount=3
Header=kernel32.h.api;
@=hread
[hwrite]
1=[HFILE] hFile
2=LPVOID lpBuffer
3=LONG lBytes
ParamCount=3
Header=kernel32.h.api;
@=hwrite
[lclose]
1=[HFILE] hFile
ParamCount=1
Header=kernel32.h.api;
@=lclose
[llseek]
1=[HFILE] hFile
2=LONG lOffset
3=[SEEK_TYPE] iOrigin
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=llseek
[AreFileApisANSI]
ParamCount=0
@=AreFileApisANSI
[CheckNameLegalDOS8Dot3]
1=LPCTSTR lpName
2=LPSTR lpOemName
3=DWORD OemNameSize
4=PBOOL pbNameContainsSpaces
5=PBOOL pbNameLegal
ParamCount=5
@=CheckNameLegalDOS8Dot3
[CopyFile]
1=LPCTSTR lpExistingFileName
2=LPCTSTR lpNewFileName
3=BOOL bFailIfExists
ParamCount=3
@=CopyFile
[CopyFile2]
1=PCWSTR pwszExistingFileName
2=PCWSTR pwszNewFileName
3=COPYFILE2_EXTENDED_PARAMETERS* pExtendedParameters
ParamCount=3
Header=kernel32.h.api;
@=CopyFile2
[CopyFileEx]
1=LPCTSTR lpExistingFileName
2=LPCTSTR lpNewFileName
3=LPPROGRESS_ROUTINE lpProgressRoutine
4=LPVOID lpData
5=LPBOOL pbCancel
6=[COPY_FILE_FLAGS] dwCopyFlags
ParamCount=6
Header=kernel32.h.api;
@=CopyFileEx
[CopyFileTransacted]
1=LPCTSTR lpExistingFileName
2=LPCTSTR lpNewFileName
3=LPPROGRESS_ROUTINE lpProgressRoutine
4=LPVOID lpData
5=LPBOOL pbCancel
6=[COPY_FILE_FLAGS] dwCopyFlags
7=HANDLE hTransaction
ParamCount=7
Header=kernel32.h.api;windows.h.api;
@=CopyFileTransacted
[CreateFile]
1=LPCTSTR lpFileName
2=[FILE_ACCESS_MASK] dwDesiredAccess
3=[FILE_SHARE_MODE] dwShareMode
4=LPSECURITY_ATTRIBUTES lpSecurityAttributes
5=[CreationDisposition] dwCreationDisposition
6=[FlagsAndAttributes] dwFlagsAndAttributes
7=HANDLE hTemplateFile
ParamCount=7
Header=kernel32.h.api;native.h.api;security.h.api;windows.h.api;
@=CreateFile
[CreateFile2]
1=LPCWSTR lpFileName
2=[FILE_ACCESS_MASK] dwDesiredAccess
3=[FILE_SHARE_MODE] dwShareMode
4=[CreationDisposition] dwCreationDisposition
5=LPCREATEFILE2_EXTENDED_PARAMETERS pCreateExParams
ParamCount=5
Header=kernel32.h.api;native.h.api;windows.h.api;
@=CreateFile2
[CreateFileTransacted]
1=LPCTSTR lpFileName
2=[FILE_ACCESS_MASK] dwDesiredAccess
3=[FILE_SHARE_MODE] dwShareMode
4=LPSECURITY_ATTRIBUTES lpSecurityAttributes
5=[CreationDisposition] dwCreationDisposition
6=[FlagsAndAttributes] dwFlagsAndAttributes
7=HANDLE hTemplateFile
8=HANDLE hTransaction
9=PUSHORT pusMiniVersion
10=PVOID pExtendedParameter
ParamCount=10
Header=kernel32.h.api;native.h.api;security.h.api;windows.h.api;
@=CreateFileTransacted
[CreateHardLink]
1=LPCTSTR lpFileName
2=LPCTSTR lpExistingFileName
3=LPSECURITY_ATTRIBUTES lpSecurityAttributes
ParamCount=3
Header=security.h.api;
@=CreateHardLink
[CreateHardLinkTransacted]
1=LPCTSTR lpFileName
2=LPCTSTR lpExistingFileName
3=LPSECURITY_ATTRIBUTES lpSecurityAttributes
4=HANDLE hTransaction
ParamCount=4
Header=security.h.api;windows.h.api;
@=CreateHardLinkTransacted
[CreateSymbolicLink]
1=LPTSTR lpSymlinkFileName
2=LPTSTR lpTargetFileName
3=[CreateSymbolicLinkFlags] dwFlags
ParamCount=3
Header=kernel32.h.api;
@=CreateSymbolicLink
[CreateSymbolicLinkTransacted]
1=LPTSTR lpSymlinkFileName
2=LPTSTR lpTargetFileName
3=[CreateSymbolicLinkFlags] dwFlags
4=HANDLE hTransaction
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=CreateSymbolicLinkTransacted
[DeleteFile]
1=LPCTSTR lpFileName
ParamCount=1
@=DeleteFile
[DeleteFileTransacted]
1=LPCTSTR lpFileName
2=HANDLE hTransaction
ParamCount=2
Header=windows.h.api;
@=DeleteFileTransacted
[FindClose]
1=HANDLE hFindFile
ParamCount=1
Header=windows.h.api;
@=FindClose
[FindFirstFile]
1=LPCTSTR lpFileName
2=LPWIN32_FIND_DATA lpFindFileData
ParamCount=2
Header=windows.h.api;
@=FindFirstFile
[FindFirstFileEx]
1=LPCTSTR lpFileName
2=[FINDEX_INFO_LEVELS] fInfoLevelId
3=LPVOID lpFindFileData
4=[FINDEX_SEARCH_OPS] fSearchOp
5=LPVOID lpSearchFilter
6=[FindFirstFileExFlags] dwAdditionalFlags
ParamCount=6
Header=kernel32.h.api;
@=FindFirstFileEx
[FindFirstFileNameTransactedW]
1=LPCWSTR lpFileName
2=DWORD dwFlags
3=LPDWORD StringLength
4=PWCHAR LinkName
5=HANDLE hTransaction
ParamCount=5
Header=windows.h.api;
@=FindFirstFileNameTransactedW
[FindFirstFileNameW]
1=LPCWSTR lpFileName
2=DWORD dwFlags
3=LPDWORD StringLength
4=PWCHAR LinkName
ParamCount=4
@=FindFirstFileNameW
[FindFirstFileTransacted]
1=LPCTSTR lpFileName
2=[FINDEX_INFO_LEVELS] fInfoLevelId
3=LPVOID lpFindFileData
4=[FINDEX_SEARCH_OPS] fSearchOp
5=LPVOID lpSearchFilter
6=[FindFirstFileExFlags] dwAdditionalFlags
7=HANDLE hTransaction
ParamCount=7
Header=kernel32.h.api;windows.h.api;
@=FindFirstFileTransacted
[FindFirstStreamTransactedW]
1=LPCWSTR lpFileName
2=[STREAM_INFO_LEVELS] InfoLevel
3=LPVOID lpFindStreamData
4=DWORD dwFlags
5=HANDLE hTransaction
ParamCount=5
Header=kernel32.h.api;windows.h.api;
@=FindFirstStreamTransactedW
[FindFirstStreamW]
1=LPCWSTR lpFileName
2=[STREAM_INFO_LEVELS] InfoLevel
3=LPVOID lpFindStreamData
4=DWORD dwFlags
ParamCount=4
Header=kernel32.h.api;
@=FindFirstStreamW
[FindNextFile]
1=HANDLE hFindFile
2=LPWIN32_FIND_DATA lpFindFileData
ParamCount=2
Header=windows.h.api;
@=FindNextFile
[FindNextFileNameW]
1=HANDLE hFindStream
2=LPDWORD StringLength
3=PWCHAR LinkName
ParamCount=3
Header=windows.h.api;
@=FindNextFileNameW
[FindNextStreamW]
1=HANDLE hFindStream
2=LPVOID lpFindStreamData
ParamCount=2
Header=windows.h.api;
@=FindNextStreamW
[GetBinaryType]
1=LPCTSTR lpApplicationName
2=[GetBinaryTypeResult*] lpBinaryType
ParamCount=2
Header=kernel32.h.api;
@=GetBinaryType
[GetCompressedFileSize]
1=LPCTSTR lpFileName
2=LPDWORD lpFileSizeHigh
ParamCount=2
@=GetCompressedFileSize
[GetCompressedFileSizeTransacted]
1=LPCTSTR lpFileName
2=LPDWORD lpFileSizeHigh
3=HANDLE hTransaction
ParamCount=3
Header=windows.h.api;
@=GetCompressedFileSizeTransacted
[GetFileAttributes]
1=LPCTSTR lpFileName
ParamCount=1
@=GetFileAttributes
[GetFileAttributesEx]
1=LPCTSTR lpFileName
2=[GET_FILEEX_INFO_LEVELS] fInfoLevelId
3=LPVOID lpFileInformation
ParamCount=3
Header=windows.h.api;
@=GetFileAttributesEx
[GetFileAttributesTransacted]
1=LPCTSTR lpFileName
2=[GET_FILEEX_INFO_LEVELS] fInfoLevelId
3=LPVOID lpFileInformation
4=HANDLE hTransaction
ParamCount=4
Header=windows.h.api;
@=GetFileAttributesTransacted
[GetFileBandwidthReservation]
1=HANDLE hFile
2=LPDWORD lpPeriodMilliseconds
3=LPDWORD lpBytesPerPeriod
4=LPBOOL pDiscardable
5=LPDWORD lpTransferSize
6=LPDWORD lpNumOutstandingRequests
ParamCount=6
Header=windows.h.api;
@=GetFileBandwidthReservation
[GetFileInformationByHandle]
1=HANDLE hFile
2=LPBY_HANDLE_FILE_INFORMATION lpFileInformation
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=GetFileInformationByHandle
[GetFileInformationByHandleEx]
1=HANDLE hFile
2=[FILE_INFO_BY_HANDLE_CLASS] FileInformationClass
3=LPVOID lpFileInformation
4=DWORD dwBufferSize
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=GetFileInformationByHandleEx
[GetFileSize]
1=HANDLE hFile
2=LPDWORD lpFileSizeHigh
ParamCount=2
Header=windows.h.api;
@=GetFileSize
[GetFileSizeEx]
1=HANDLE hFile
2=PLARGE_INTEGER lpFileSize
ParamCount=2
Header=windows.h.api;
@=GetFileSizeEx
[GetFileType]
1=HANDLE hFile
ParamCount=1
Header=windows.h.api;
@=GetFileType
[GetFinalPathNameByHandle]
1=HANDLE hFile
2=LPTSTR lpszFilePath
3=DWORD cchFilePath
4=[GetFinalPathNameByHandleFlags] dwFlags
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=GetFinalPathNameByHandle
[GetFullPathName]
1=LPCTSTR lpFileName
2=DWORD nBufferLength
3=LPTSTR lpBuffer
4=LPTSTR* lpFilePart
ParamCount=4
@=GetFullPathName
[GetFullPathNameTransacted]
1=LPCTSTR lpFileName
2=DWORD nBufferLength
3=LPTSTR lpBuffer
4=LPTSTR* lpFilePart
5=HANDLE hTransaction
ParamCount=5
Header=windows.h.api;
@=GetFullPathNameTransacted
[GetLongPathName]
1=LPCTSTR lpszShortPath
2=LPTSTR lpszLongPath
3=DWORD cchBuffer
ParamCount=3
@=GetLongPathName
[GetLongPathNameTransacted]
1=LPCTSTR lpszShortPath
2=LPTSTR lpszLongPath
3=DWORD cchBuffer
4=HANDLE hTransaction
ParamCount=4
Header=windows.h.api;
@=GetLongPathNameTransacted
[GetShortPathName]
1=LPCTSTR lpszLongPath
2=LPTSTR lpszShortPath
3=DWORD cchBuffer
ParamCount=3
@=GetShortPathName
[GetTempFileName]
1=LPCTSTR lpPathName
2=LPCTSTR lpPrefixString
3=UINT uUnique
4=LPTSTR lpTempFileName
ParamCount=4
@=GetTempFileName
[GetTempPath]
1=DWORD nBufferLength
2=LPTSTR lpBuffer
ParamCount=2
@=GetTempPath
[MoveFile]
1=LPCTSTR lpExistingFileName
2=LPCTSTR lpNewFileName
ParamCount=2
@=MoveFile
[MoveFileEx]
1=LPCTSTR lpExistingFileName
2=LPCTSTR lpNewFileName
3=[MoveFileFlags] dwFlags
ParamCount=3
Header=kernel32.h.api;
@=MoveFileEx
[MoveFileTransacted]
1=LPCTSTR lpExistingFileName
2=LPCTSTR lpNewFileName
3=LPPROGRESS_ROUTINE lpProgressRoutine
4=LPVOID lpData
5=DWORD dwFlags
6=HANDLE hTransaction
ParamCount=6
Header=kernel32.h.api;windows.h.api;
@=MoveFileTransacted
[MoveFileWithProgress]
1=LPCTSTR lpExistingFileName
2=LPCTSTR lpNewFileName
3=LPPROGRESS_ROUTINE lpProgressRoutine
4=LPVOID lpData
5=DWORD dwFlags
ParamCount=5
Header=kernel32.h.api;
@=MoveFileWithProgress
[OpenFile]
1=LPCSTR lpFileName
2=LPOFSTRUCT lpReOpenBuff
3=[OpenFileFlags] uStyle
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=OpenFile
[OpenFileById]
1=HANDLE hFile
2=LPFILE_ID_DESCRIPTOR lpFileID
3=[FILE_ACCESS_MASK] dwDesiredAccess
4=[FILE_SHARE_MODE] dwShareMode
5=LPSECURITY_ATTRIBUTES lpSecurityAttributes
6=[FlagsAndAttributes] dwFlags
ParamCount=6
Header=kernel32.h.api;native.h.api;security.h.api;windows.h.api;
@=OpenFileById
[ReOpenFile]
1=HANDLE hOriginalFile
2=[FILE_ACCESS_MASK] dwDesiredAccess
3=[FILE_SHARE_MODE] dwShareMode
4=[FlagsAndAttributes] dwFlags
ParamCount=4
Header=kernel32.h.api;native.h.api;windows.h.api;
@=ReOpenFile
[ReplaceFile]
1=LPCTSTR lpReplacedFileName
2=LPCTSTR lpReplacementFileName
3=LPCTSTR lpBackupFileName
4=DWORD dwReplaceFlags
5=LPVOID lpExclude
6=LPVOID lpReserved
ParamCount=6
@=ReplaceFile
[SearchPath]
1=LPCTSTR lpPath
2=LPCTSTR lpFileName
3=LPCTSTR lpExtension
4=DWORD nBufferLength
5=LPTSTR lpBuffer
6=LPTSTR* lpFilePart
ParamCount=6
@=SearchPath
[SetFileApisToANSI]
ParamCount=0
@=SetFileApisToANSI
[SetFileApisToOEM]
ParamCount=0
@=SetFileApisToOEM
[SetFileAttributes]
1=LPCTSTR lpFileName
2=[FileAttributes] dwFileAttributes
ParamCount=2
Header=windows.h.api;
@=SetFileAttributes
[SetFileAttributesTransacted]
1=LPCTSTR lpFileName
2=[FileAttributes] dwFileAttributes
3=HANDLE hTransaction
ParamCount=3
Header=windows.h.api;
@=SetFileAttributesTransacted
[SetFileBandwidthReservation]
1=HANDLE hFile
2=DWORD nPeriodMilliseconds
3=DWORD nBytesPerPeriod
4=BOOL bDiscardable
5=LPDWORD lpTransferSize
6=LPDWORD lpNumOutstandingRequests
ParamCount=6
Header=windows.h.api;
@=SetFileBandwidthReservation
[SetFileInformationByHandle]
1=HANDLE hFile
2=[FILE_INFO_BY_HANDLE_CLASS] FileInformationClass
3=LPVOID lpFileInformation
4=DWORD dwBufferSize
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=SetFileInformationByHandle
[SetFileShortName]
1=HANDLE hFile
2=LPCTSTR lpShortName
ParamCount=2
Header=windows.h.api;
@=SetFileShortName
[SetFileValidData]
1=HANDLE hFile
2=LONGLONG ValidDataLength
ParamCount=2
Header=windows.h.api;
@=SetFileValidData
[SetSearchPathMode]
1=DWORD Flags
ParamCount=1
@=SetSearchPathMode
[CancelIo]
1=HANDLE hFile
ParamCount=1
Header=windows.h.api;
@=CancelIo
[CancelIoEx]
1=HANDLE hFile
2=LPOVERLAPPED lpOverlapped
ParamCount=2
Header=windows.h.api;
@=CancelIoEx
[CancelSynchronousIo]
1=[ThreadHandle] hThread
ParamCount=1
Header=windows.h.api;
@=CancelSynchronousIo
[CreateIoCompletionPort]
1=HANDLE FileHandle
2=HANDLE ExistingCompletionPort
3=ULONG_PTR CompletionKey
4=DWORD NumberOfConcurrentThreads
ParamCount=4
Header=windows.h.api;
@=CreateIoCompletionPort
[FlushFileBuffers]
1=HANDLE hFile
ParamCount=1
Header=windows.h.api;
@=FlushFileBuffers
[GetQueuedCompletionStatus]
1=HANDLE CompletionPort
2=LPDWORD lpNumberOfBytes
3=PULONG_PTR lpCompletionKey
4=LPOVERLAPPED* lpOverlapped
5=[WaitTimeout] dwMilliseconds
ParamCount=5
Header=windows.h.api;
@=GetQueuedCompletionStatus
[GetQueuedCompletionStatusEx]
1=HANDLE CompletionPort
2=LPOVERLAPPED_ENTRY lpCompletionPortEntries
3=ULONG ulCount
4=PULONG ulNumEntriesRemoved
5=[WaitTimeout] dwMilliseconds
6=BOOL fAlertable
ParamCount=6
Header=kernel32.h.api;windows.h.api;
@=GetQueuedCompletionStatusEx
[LockFile]
1=HANDLE hFile
2=DWORD dwFileOffsetLow
3=DWORD dwFileOffsetHigh
4=DWORD nNumberOfBytesToLockLow
5=DWORD nNumberOfBytesToLockHigh
ParamCount=5
Header=windows.h.api;
@=LockFile
[LockFileEx]
1=HANDLE hFile
2=[LockFileFlags] dwFlags
3=DWORD dwReserved
4=DWORD nNumberOfBytesToLockLow
5=DWORD nNumberOfBytesToLockHigh
6=LPOVERLAPPED lpOverlapped
ParamCount=6
Header=kernel32.h.api;windows.h.api;
@=LockFileEx
[PostQueuedCompletionStatus]
1=HANDLE CompletionPort
2=DWORD dwNumberOfBytesTransferred
3=ULONG_PTR dwCompletionKey
4=LPOVERLAPPED lpOverlapped
ParamCount=4
Header=windows.h.api;
@=PostQueuedCompletionStatus
[ReadFile]
1=HANDLE hFile
2=LPVOID lpBuffer
3=DWORD nNumberOfBytesToRead
4=LPDWORD lpNumberOfBytesRead
5=LPOVERLAPPED lpOverlapped
ParamCount=5
Header=windows.h.api;
@=ReadFile
[ReadFileEx]
1=HANDLE hFile
2=LPVOID lpBuffer
3=DWORD nNumberOfBytesToRead
4=LPOVERLAPPED lpOverlapped
5=LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
ParamCount=5
Header=kernel32.h.api;windows.h.api;
@=ReadFileEx
[ReadFileScatter]
1=HANDLE hFile
2=FILE_SEGMENT_ELEMENT[] aSegmentArray
3=DWORD nNumberOfBytesToRead
4=LPDWORD lpReserved
5=LPOVERLAPPED lpOverlapped
ParamCount=5
Header=windows.h.api;
@=ReadFileScatter
[SetEndOfFile]
1=HANDLE hFile
ParamCount=1
Header=windows.h.api;
@=SetEndOfFile
[SetFileCompletionNotificationModes]
1=HANDLE FileHandle
2=UCHAR Flags
ParamCount=2
Header=windows.h.api;
@=SetFileCompletionNotificationModes
[SetFileIoOverlappedRange]
1=HANDLE FileHandle
2=PUCHAR OverlappedRangeStart
3=ULONG Length
ParamCount=3
Header=windows.h.api;
@=SetFileIoOverlappedRange
[SetFilePointer]
1=HANDLE hFile
2=LONG lDistanceToMove
3=PLONG lpDistanceToMoveHigh
4=[MoveMethodEnum] dwMoveMethod
ParamCount=4
Header=windows.h.api;
@=SetFilePointer
[SetFilePointerEx]
1=HANDLE hFile
2=LARGE_INTEGER liDistanceToMove
3=PLARGE_INTEGER lpNewFilePointer
4=[MoveMethodEnum] dwMoveMethod
ParamCount=4
Header=windows.h.api;
@=SetFilePointerEx
[UnlockFile]
1=HANDLE hFile
2=DWORD dwFileOffsetLow
3=DWORD dwFileOffsetHigh
4=DWORD nNumberOfBytesToUnlockLow
5=DWORD nNumberOfBytesToUnlockHigh
ParamCount=5
Header=windows.h.api;
@=UnlockFile
[UnlockFileEx]
1=HANDLE hFile
2=DWORD dwReserved
3=DWORD nNumberOfBytesToUnlockLow
4=DWORD nNumberOfBytesToUnlockHigh
5=LPOVERLAPPED lpOverlapped
ParamCount=5
Header=windows.h.api;
@=UnlockFileEx
[WriteFile]
1=HANDLE hFile
2=LPCVOID lpBuffer
3=DWORD nNumberOfBytesToWrite
4=LPDWORD lpNumberOfBytesWritten
5=LPOVERLAPPED lpOverlapped
ParamCount=5
Header=windows.h.api;
@=WriteFile
[WriteFileEx]
1=HANDLE hFile
2=LPCVOID lpBuffer
3=DWORD nNumberOfBytesToWrite
4=LPOVERLAPPED lpOverlapped
5=LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
ParamCount=5
Header=kernel32.h.api;windows.h.api;
@=WriteFileEx
[WriteFileGather]
1=HANDLE hFile
2=FILE_SEGMENT_ELEMENT[] aSegmentArray
3=DWORD nNumberOfBytesToWrite
4=LPDWORD lpReserved
5=LPOVERLAPPED lpOverlapped
ParamCount=5
Header=windows.h.api;
@=WriteFileGather
[Wow64DisableWow64FsRedirection]
1=PVOID* OldValue
ParamCount=1
@=Wow64DisableWow64FsRedirection
[Wow64EnableWow64FsRedirection]
1=BOOLEAN Wow64FsEnableRedirection
ParamCount=1
@=Wow64EnableWow64FsRedirection
[Wow64RevertWow64FsRedirection]
1=PVOID OldValue
ParamCount=1
@=Wow64RevertWow64FsRedirection
[AddSecureMemoryCacheCallback]
1=PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
ParamCount=1
Header=kernel32.h.api;
@=AddSecureMemoryCacheCallback
[CreateMemoryResourceNotification]
1=[MEMORY_RESOURCE_NOTIFICATION_TYPE] NotificationType
ParamCount=1
Header=kernel32.h.api;
@=CreateMemoryResourceNotification
[GetLargePageMinimum]
ParamCount=0
@=GetLargePageMinimum
[GetPhysicallyInstalledSystemMemory]
1=PULONGLONG TotalMemoryInKilobytes
ParamCount=1
@=GetPhysicallyInstalledSystemMemory
[GetSystemFileCacheSize]
1=PSIZE_T lpMinimumFileCacheSize
2=PSIZE_T lpMaximumFileCacheSize
3=PDWORD lpFlags
ParamCount=3
@=GetSystemFileCacheSize
[GetWriteWatch]
1=DWORD dwFlags
2=PVOID lpBaseAddress
3=SIZE_T dwRegionSize
4=PVOID* lpAddresses
5=PULONG_PTR lpdwCount
6=PULONG lpdwGranularity
ParamCount=6
@=GetWriteWatch
[GlobalMemoryStatusEx]
1=LPMEMORYSTATUSEX lpBuffer
ParamCount=1
Header=kernel32.h.api;
@=GlobalMemoryStatusEx
[QueryMemoryResourceNotification]
1=HANDLE ResourceNotificationHandle
2=PBOOL ResourceState
ParamCount=2
Header=windows.h.api;
@=QueryMemoryResourceNotification
[RemoveSecureMemoryCacheCallback]
1=PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
ParamCount=1
Header=kernel32.h.api;
@=RemoveSecureMemoryCacheCallback
[ResetWriteWatch]
1=LPVOID lpBaseAddress
2=SIZE_T dwRegionSize
ParamCount=2
@=ResetWriteWatch
[SetSystemFileCacheSize]
1=SIZE_T MinimumFileCacheSize
2=SIZE_T MaximumFileCacheSize
3=DWORD Flags
ParamCount=3
@=SetSystemFileCacheSize
[GetProcessDEPPolicy]
1=[ProcessHandle] hProcess
2=LPDWORD lpFlags
3=PBOOL lpPermanent
ParamCount=3
Header=windows.h.api;
@=GetProcessDEPPolicy
[GetSystemDEPPolicy]
ParamCount=0
@=GetSystemDEPPolicy
[SetProcessDEPPolicy]
1=DWORD dwFlags
ParamCount=1
@=SetProcessDEPPolicy
[CreateFileMapping]
1=[FILE_HANDLE] hFile
2=LPSECURITY_ATTRIBUTES lpAttributes
3=[MemoryProtection] flProtect
4=DWORD dwMaximumSizeHigh
5=DWORD dwMaximumSizeLow
6=LPCTSTR lpName
ParamCount=6
Header=native.h.api;security.h.api;windows.h.api;
@=CreateFileMapping
[CreateFileMappingFromApp]
1=HANDLE hFile
2=PSECURITY_ATTRIBUTES SecurityAttributes
3=ULONG PageProtection
4=ULONG64 MaximumSize
5=PCWSTR Name
ParamCount=5
Header=security.h.api;windows.h.api;
@=CreateFileMappingFromApp
[CreateFileMappingNuma]
1=[FILE_HANDLE] hFile
2=LPSECURITY_ATTRIBUTES lpFileMappingAttributes
3=[MemoryProtection] flProtect
4=DWORD dwMaximumSizeHigh
5=DWORD dwMaximumSizeLow
6=LPCTSTR lpName
7=DWORD nndPreferred
ParamCount=7
Header=native.h.api;security.h.api;windows.h.api;
@=CreateFileMappingNuma
[FlushViewOfFile]
1=LPCVOID lpBaseAddress
2=SIZE_T dwNumberOfBytesToFlush
ParamCount=2
@=FlushViewOfFile
[MapViewOfFile]
1=HANDLE hFileMappingObject
2=[MapAccessFlags] dwDesiredAccess
3=DWORD dwFileOffsetHigh
4=DWORD dwFileOffsetLow
5=SIZE_T dwNumberOfBytesToMap
ParamCount=5
Header=kernel32.h.api;windows.h.api;
@=MapViewOfFile
[MapViewOfFileEx]
1=HANDLE hFileMappingObject
2=[MapAccessFlags] dwDesiredAccess
3=DWORD dwFileOffsetHigh
4=DWORD dwFileOffsetLow
5=SIZE_T dwNumberOfBytesToMap
6=LPVOID lpBaseAddress
ParamCount=6
Header=kernel32.h.api;windows.h.api;
@=MapViewOfFileEx
[MapViewOfFileExNuma]
1=HANDLE hFileMappingObject
2=DWORD dwDesiredAccess
3=DWORD dwFileOffsetHigh
4=DWORD dwFileOffsetLow
5=SIZE_T dwNumberOfBytesToMap
6=LPVOID lpBaseAddress
7=DWORD nndPreferred
ParamCount=7
Header=windows.h.api;
@=MapViewOfFileExNuma
[MapViewOfFileFromApp]
1=HANDLE hFileMappingObject
2=ULONG DesiredAccess
3=ULONG64 FileOffset
4=SIZE_T NumberOfBytesToMap
ParamCount=4
Header=windows.h.api;
@=MapViewOfFileFromApp
[OpenFileMapping]
1=[MapAccessFlags] dwDesiredAccess
2=BOOL bInheritHandle
3=LPCTSTR lpName
ParamCount=3
Header=kernel32.h.api;
@=OpenFileMapping
[UnmapViewOfFile]
1=LPCVOID lpBaseAddress
ParamCount=1
@=UnmapViewOfFile
[AllocateUserPhysicalPages]
1=[ProcessHandle] hProcess
2=PULONG_PTR NumberOfPages
3=PULONG_PTR UserPfnArray
ParamCount=3
Header=windows.h.api;
@=AllocateUserPhysicalPages
[FreeUserPhysicalPages]
1=[ProcessHandle] hProcess
2=PULONG_PTR NumberOfPages
3=PULONG_PTR UserPfnArray
ParamCount=3
Header=windows.h.api;
@=FreeUserPhysicalPages
[MapUserPhysicalPages]
1=PVOID lpAddress
2=ULONG_PTR NumberOfPages
3=PULONG_PTR UserPfnArray
ParamCount=3
@=MapUserPhysicalPages
[MapUserPhysicalPagesScatter]
1=PVOID* VirtualAddresses
2=ULONG_PTR NumberOfPages
3=PULONG_PTR PageArray
ParamCount=3
@=MapUserPhysicalPagesScatter
[GetProcessHeap]
ParamCount=0
@=GetProcessHeap
[GetProcessHeaps]
1=DWORD NumberOfHeaps
2=PHANDLE ProcessHeaps
ParamCount=2
Header=windows.h.api;
@=GetProcessHeaps
[HeapAlloc]
1=HANDLE hHeap
2=[HEAP_FLAGS] dwFlags
3=SIZE_T dwBytes
ParamCount=3
Header=windows.h.api;
@=HeapAlloc
[HeapCompact]
1=HANDLE hHeap
2=[HEAP_FLAGS] dwFlags
ParamCount=2
Header=windows.h.api;
@=HeapCompact
[HeapCreate]
1=[HEAP_FLAGS] flOptions
2=SIZE_T dwInitialSize
3=SIZE_T dwMaximumSize
ParamCount=3
Header=windows.h.api;
@=HeapCreate
[HeapDestroy]
1=HANDLE hHeap
ParamCount=1
Header=windows.h.api;
@=HeapDestroy
[HeapFree]
1=HANDLE hHeap
2=[HEAP_FLAGS] dwFlags
3=LPVOID lpMem
ParamCount=3
Header=windows.h.api;
@=HeapFree
[HeapLock]
1=HANDLE hHeap
ParamCount=1
Header=windows.h.api;
@=HeapLock
[HeapQueryInformation]
1=HANDLE HeapHandle
2=[HEAP_INFORMATION_CLASS] HeapInformationClass
3=PVOID HeapInformation
4=SIZE_T HeapInformationLength
5=PSIZE_T ReturnLength
ParamCount=5
Header=kernel32.h.api;windows.h.api;
@=HeapQueryInformation
[HeapReAlloc]
1=HANDLE hHeap
2=[HEAP_FLAGS] dwFlags
3=LPVOID lpMem
4=SIZE_T dwBytes
ParamCount=4
Header=windows.h.api;
@=HeapReAlloc
[HeapSetInformation]
1=HANDLE HeapHandle
2=[HEAP_INFORMATION_CLASS] HeapInformationClass
3=PVOID HeapInformation
4=SIZE_T HeapInformationLength
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=HeapSetInformation
[HeapSize]
1=HANDLE hHeap
2=[HEAP_FLAGS] dwFlags
3=LPCVOID lpMem
ParamCount=3
Header=windows.h.api;
@=HeapSize
[HeapUnlock]
1=HANDLE hHeap
ParamCount=1
Header=windows.h.api;
@=HeapUnlock
[HeapValidate]
1=HANDLE hHeap
2=[HEAP_FLAGS] dwFlags
3=LPCVOID lpMem
ParamCount=3
Header=windows.h.api;
@=HeapValidate
[HeapWalk]
1=HANDLE hHeap
2=LPPROCESS_HEAP_ENTRY lpEntry
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=HeapWalk
[HeapSummary]
1=HANDLE hHeap
2=DWORD dwFlags
3=LPHEAP_SUMMARY lpSummary
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=HeapSummary
[PrefetchVirtualMemory]
1=HANDLE hProcess
2=ULONG_PTR NumberOfEntries
3=PWIN32_MEMORY_RANGE_ENTRY VirtualAddresses
4=ULONG Flags
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=PrefetchVirtualMemory
[VirtualAlloc]
1=LPVOID lpAddress
2=SIZE_T dwSize
3=[MemoryAllocationFlags] flAllocationType
4=[MemoryProtection] flProtect
ParamCount=4
Header=native.h.api;
@=VirtualAlloc
[VirtualAllocEx]
1=[ProcessHandle] hProcess
2=LPVOID lpAddress
3=SIZE_T dwSize
4=[MemoryAllocationFlags] flAllocationType
5=[MemoryProtection] flProtect
ParamCount=5
Header=native.h.api;windows.h.api;
@=VirtualAllocEx
[VirtualAllocExNuma]
1=[ProcessHandle] hProcess
2=LPVOID lpAddress
3=SIZE_T dwSize
4=DWORD flAllocationType
5=[MemoryProtection] flProtect
6=DWORD nndPreferred
ParamCount=6
Header=native.h.api;windows.h.api;
@=VirtualAllocExNuma
[VirtualFree]
1=LPVOID lpAddress
2=SIZE_T dwSize
3=[MemoryAllocationFlags] dwFreeType
ParamCount=3
Header=native.h.api;
@=VirtualFree
[VirtualFreeEx]
1=[ProcessHandle] hProcess
2=LPVOID lpAddress
3=SIZE_T dwSize
4=[MemoryAllocationFlags] dwFreeType
ParamCount=4
Header=native.h.api;windows.h.api;
@=VirtualFreeEx
[VirtualLock]
1=LPVOID lpAddress
2=SIZE_T dwSize
ParamCount=2
@=VirtualLock
[VirtualProtect]
1=LPVOID lpAddress
2=SIZE_T dwSize
3=[MemoryProtection] flNewProtect
4=[MemoryProtection*] lpflOldProtect
ParamCount=4
Header=native.h.api;
@=VirtualProtect
[VirtualProtectEx]
1=[ProcessHandle] hProcess
2=LPVOID lpAddress
3=SIZE_T dwSize
4=[MemoryProtection] flNewProtect
5=[MemoryProtection*] lpflOldProtect
ParamCount=5
Header=native.h.api;windows.h.api;
@=VirtualProtectEx
[VirtualQuery]
1=LPCVOID lpAddress
2=PMEMORY_BASIC_INFORMATION lpBuffer
3=SIZE_T dwLength
ParamCount=3
Header=kernel32.h.api;
@=VirtualQuery
[VirtualQueryEx]
1=[ProcessHandle] hProcess
2=LPCVOID lpAddress
3=PMEMORY_BASIC_INFORMATION lpBuffer
4=SIZE_T dwLength
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=VirtualQueryEx
[VirtualUnlock]
1=LPVOID lpAddress
2=SIZE_T dwSize
ParamCount=2
@=VirtualUnlock
[GlobalAlloc]
1=[GlobalMemoryFlag] uFlags
2=SIZE_T dwBytes
ParamCount=2
Header=kernel32.h.api;
@=GlobalAlloc
[LocalAlloc]
1=[LocalMemoryFlag] uFlags
2=SIZE_T uBytes
ParamCount=2
Header=kernel32.h.api;
@=LocalAlloc
[GlobalFlags]
1=HGLOBAL hMem
ParamCount=1
Header=windows.h.api;
@=GlobalFlags
[LocalFlags]
1=HLOCAL hMem
ParamCount=1
Header=kernel32.h.api;
@=LocalFlags
[GlobalFree]
1=HGLOBAL hMem
ParamCount=1
Header=windows.h.api;
@=GlobalFree
[LocalFree]
1=HLOCAL hMem
ParamCount=1
Header=kernel32.h.api;
@=LocalFree
[GlobalHandle]
1=LPCVOID pMem
ParamCount=1
@=GlobalHandle
[LocalHandle]
1=LPCVOID pMem
ParamCount=1
@=LocalHandle
[GlobalLock]
1=HGLOBAL hMem
ParamCount=1
Header=windows.h.api;
@=GlobalLock
[LocalLock]
1=HLOCAL hMem
ParamCount=1
Header=kernel32.h.api;
@=LocalLock
[GlobalReAlloc]
1=HGLOBAL hMem
2=SIZE_T dwBytes
3=[GlobalMemoryFlag] uFlags
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=GlobalReAlloc
[LocalReAlloc]
1=HLOCAL hMem
2=SIZE_T uBytes
3=[LocalMemoryFlag] uFlags
ParamCount=3
Header=kernel32.h.api;
@=LocalReAlloc
[GlobalSize]
1=HGLOBAL hMem
ParamCount=1
Header=windows.h.api;
@=GlobalSize
[LocalSize]
1=HLOCAL hMem
ParamCount=1
Header=kernel32.h.api;
@=LocalSize
[GlobalUnlock]
1=HGLOBAL hMem
ParamCount=1
Header=windows.h.api;
@=GlobalUnlock
[LocalUnlock]
1=HLOCAL hMem
ParamCount=1
Header=kernel32.h.api;
@=LocalUnlock
[GetMemoryErrorHandlingCapabilities]
1=PULONG Capabilities
ParamCount=1
@=GetMemoryErrorHandlingCapabilities
[RegisterBadMemoryNotification]
1=PBAD_MEMORY_CALLBACK_ROUTINE Callback
ParamCount=1
Header=kernel32.h.api;
@=RegisterBadMemoryNotification
[UnregisterBadMemoryNotification]
1=PVOID RegistrationHandle
ParamCount=1
@=UnregisterBadMemoryNotification
[IsBadCodePtr]
1=FARPROC lpfn
ParamCount=1
Header=windows.h.api;
@=IsBadCodePtr
[IsBadReadPtr]
1=const VOID* lp
2=UINT_PTR ucb
ParamCount=2
@=IsBadReadPtr
[IsBadStringPtr]
1=LPCTSTR lpsz
2=UINT_PTR ucchMax
ParamCount=2
@=IsBadStringPtr
[IsBadWritePtr]
1=LPVOID lp
2=UINT_PTR ucb
ParamCount=2
@=IsBadWritePtr
[GlobalMemoryStatus]
1=LPMEMORYSTATUS lpBuffer
ParamCount=1
Header=kernel32.h.api;
@=GlobalMemoryStatus
[CreateProcess]
1=LPCTSTR lpApplicationName
2=LPTSTR lpCommandLine
3=LPSECURITY_ATTRIBUTES lpProcessAttributes
4=LPSECURITY_ATTRIBUTES lpThreadAttributes
5=BOOL bInheritHandles
6=[CreateProcessFlags] dwCreationFlags
7=LPVOID lpEnvironment
8=LPCTSTR lpCurrentDirectory
9=LPSTARTUPINFO lpStartupInfo
10=LPPROCESS_INFORMATION lpProcessInformation
ParamCount=10
Header=processes.h.api;security.h.api;windows.h.api;
@=CreateProcess
[ExitProcess]
1=UINT uExitCode
ParamCount=1
@=ExitProcess
[FlushProcessWriteBuffers]
ParamCount=0
@=FlushProcessWriteBuffers
[FreeEnvironmentStrings]
1=LPTCH lpszEnvironmentBlock
ParamCount=1
@=FreeEnvironmentStrings
[GetCommandLine]
ParamCount=0
@=GetCommandLine
[GetCurrentProcess]
ParamCount=0
@=GetCurrentProcess
[GetCurrentProcessId]
ParamCount=0
@=GetCurrentProcessId
[GetEnvironmentStrings]
ParamCount=0
@=GetEnvironmentStrings
[GetEnvironmentVariable]
1=LPCTSTR lpName
2=LPTSTR lpBuffer
3=DWORD nSize
ParamCount=3
@=GetEnvironmentVariable
[GetExitCodeProcess]
1=[ProcessHandle] hProcess
2=LPDWORD lpExitCode
ParamCount=2
Header=windows.h.api;
@=GetExitCodeProcess
[GetPriorityClass]
1=[ProcessHandle] hProcess
ParamCount=1
Header=windows.h.api;
@=GetPriorityClass
[GetProcessAffinityMask]
1=[ProcessHandle] hProcess
2=PDWORD_PTR lpProcessAffinityMask
3=PDWORD_PTR lpSystemAffinityMask
ParamCount=3
Header=windows.h.api;
@=GetProcessAffinityMask
[GetProcessGroupAffinity]
1=[ProcessHandle] hProcess
2=PUSHORT GroupCount
3=PUSHORT GroupArray
ParamCount=3
Header=windows.h.api;
@=GetProcessGroupAffinity
[GetProcessHandleCount]
1=[ProcessHandle] hProcess
2=PDWORD pdwHandleCount
ParamCount=2
Header=windows.h.api;
@=GetProcessHandleCount
[GetProcessId]
1=HANDLE Process
ParamCount=1
Header=windows.h.api;
@=GetProcessId
[GetProcessIdOfThread]
1=HANDLE Thread
ParamCount=1
Header=windows.h.api;
@=GetProcessIdOfThread
[GetProcessInformation]
1=HANDLE hProcess
2=[PROCESS_INFORMATION_CLASS] ProcessInformationClass
3=LPVOID ProcessInformation
4=DWORD ProcessInformationSize
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=GetProcessInformation
[GetProcessIoCounters]
1=[ProcessHandle] hProcess
2=PIO_COUNTERS lpIoCounters
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=GetProcessIoCounters
[GetProcessMitigationPolicy]
1=HANDLE hProcess
2=[PROCESS_MITIGATION_POLICY] MitigationPolicy
3=PVOID lpBuffer
4=SIZE_T dwLength
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=GetProcessMitigationPolicy
[GetProcessPriorityBoost]
1=[ProcessHandle] hProcess
2=PBOOL pDisablePriorityBoost
ParamCount=2
Header=windows.h.api;
@=GetProcessPriorityBoost
[GetProcessShutdownParameters]
1=LPDWORD lpdwLevel
2=LPDWORD lpdwFlags
ParamCount=2
@=GetProcessShutdownParameters
[GetProcessTimes]
1=[ProcessHandle] hProcess
2=LPFILETIME lpCreationTime
3=LPFILETIME lpExitTime
4=LPFILETIME lpKernelTime
5=LPFILETIME lpUserTime
ParamCount=5
Header=windows.h.api;
@=GetProcessTimes
[GetProcessVersion]
1=DWORD ProcessId
ParamCount=1
@=GetProcessVersion
[GetProcessWorkingSetSize]
1=[ProcessHandle] hProcess
2=PSIZE_T lpMinimumWorkingSetSize
3=PSIZE_T lpMaximumWorkingSetSize
ParamCount=3
Header=windows.h.api;
@=GetProcessWorkingSetSize
[GetProcessWorkingSetSizeEx]
1=[ProcessHandle] hProcess
2=PSIZE_T lpMinimumWorkingSetSize
3=PSIZE_T lpMaximumWorkingSetSize
4=PDWORD Flags
ParamCount=4
Header=windows.h.api;
@=GetProcessWorkingSetSizeEx
[GetProcessorSystemCycleTime]
1=USHORT Group
2=PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer
3=PDWORD ReturnedLength
ParamCount=3
Header=kernel32.h.api;
@=GetProcessorSystemCycleTime
[GetStartupInfo]
1=LPSTARTUPINFO lpStartupInfo
ParamCount=1
Header=windows.h.api;
@=GetStartupInfo
[NeedCurrentDirectoryForExePath]
1=LPCTSTR ExeName
ParamCount=1
@=NeedCurrentDirectoryForExePath
[OpenProcess]
1=[PROCESS_ACCESS_MASK] dwDesiredAccess
2=BOOL bInheritHandle
3=DWORD dwProcessId
ParamCount=3
Header=windows.h.api;
@=OpenProcess
[QueryFullProcessImageName]
1=[ProcessHandle] hProcess
2=[QueryFullProcessImageNameFlags] dwFlags
3=LPTSTR lpExeName
4=PDWORD lpdwSize
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=QueryFullProcessImageName
[QueryProcessAffinityUpdateMode]
1=HANDLE ProcessHandle
2=DWORD lpdwFlags
ParamCount=2
Header=windows.h.api;
@=QueryProcessAffinityUpdateMode
[QueryProcessCycleTime]
1=HANDLE ProcessHandle
2=PULONG64 CycleTime
ParamCount=2
Header=windows.h.api;
@=QueryProcessCycleTime
[SetEnvironmentVariable]
1=LPCTSTR lpName
2=LPCTSTR lpValue
ParamCount=2
@=SetEnvironmentVariable
[SetPriorityClass]
1=[ProcessHandle] hProcess
2=[PriorityClass] dwPriorityClass
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=SetPriorityClass
[SetProcessAffinityMask]
1=[ProcessHandle] hProcess
2=DWORD_PTR dwProcessAffinityMask
ParamCount=2
Header=windows.h.api;
@=SetProcessAffinityMask
[SetProcessAffinityUpdateMode]
1=HANDLE ProcessHandle
2=DWORD dwFlags
ParamCount=2
Header=windows.h.api;
@=SetProcessAffinityUpdateMode
[SetProcessInformation]
1=HANDLE hProcess
2=[PROCESS_INFORMATION_CLASS] ProcessInformationClass
3=LPVOID ProcessInformation
4=DWORD ProcessInformationSize
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=SetProcessInformation
[SetProcessMitigationPolicy]
1=[PROCESS_MITIGATION_POLICY] MitigationPolicy
2=PVOID lpBuffer
3=SIZE_T dwLength
ParamCount=3
Header=kernel32.h.api;
@=SetProcessMitigationPolicy
[SetProcessPriorityBoost]
1=[ProcessHandle] hProcess
2=BOOL DisablePriorityBoost
ParamCount=2
Header=windows.h.api;
@=SetProcessPriorityBoost
[SetProcessShutdownParameters]
1=DWORD dwLevel
2=[ProcessShutdownFlags] dwFlags
ParamCount=2
Header=kernel32.h.api;
@=SetProcessShutdownParameters
[SetProcessWorkingSetSize]
1=[ProcessHandle] hProcess
2=SIZE_T dwMinimumWorkingSetSize
3=SIZE_T dwMaximumWorkingSetSize
ParamCount=3
Header=windows.h.api;
@=SetProcessWorkingSetSize
[SetProcessWorkingSetSizeEx]
1=[ProcessHandle] hProcess
2=SIZE_T dwMinimumWorkingSetSize
3=SIZE_T dwMaximumWorkingSetSize
4=DWORD Flags
ParamCount=4
Header=windows.h.api;
@=SetProcessWorkingSetSizeEx
[TerminateProcess]
1=[ProcessHandle] hProcess
2=UINT uExitCode
ParamCount=2
Header=windows.h.api;
@=TerminateProcess
[CreateRemoteThread]
1=[ProcessHandle] hProcess
2=LPSECURITY_ATTRIBUTES lpThreadAttributes
3=SIZE_T dwStackSize
4=LPTHREAD_START_ROUTINE lpStartAddress
5=LPVOID lpParameter
6=DWORD dwCreationFlags
7=LPDWORD lpThreadId
ParamCount=7
Header=security.h.api;windows.h.api;
@=CreateRemoteThread
[CreateRemoteThreadEx]
1=[ProcessHandle] hProcess
2=LPSECURITY_ATTRIBUTES lpThreadAttributes
3=SIZE_T dwStackSize
4=LPTHREAD_START_ROUTINE lpStartAddress
5=LPVOID lpParameter
6=DWORD dwCreationFlags
7=LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList
8=LPDWORD lpThreadId
ParamCount=8
Header=native.h.api;security.h.api;windows.h.api;
@=CreateRemoteThreadEx
[CreateThread]
1=LPSECURITY_ATTRIBUTES lpThreadAttributes
2=SIZE_T dwStackSize
3=LPTHREAD_START_ROUTINE lpStartAddress
4=LPVOID lpParameter
5=[ThreadCreationFlags] dwCreationFlags
6=LPDWORD lpThreadId
ParamCount=6
Header=kernel32.h.api;security.h.api;windows.h.api;
@=CreateThread
[ExitThread]
1=DWORD dwExitCode
ParamCount=1
@=ExitThread
[GetCurrentThread]
ParamCount=0
@=GetCurrentThread
[GetCurrentThreadId]
ParamCount=0
@=GetCurrentThreadId
[GetExitCodeThread]
1=[ThreadHandle] hThread
2=LPDWORD lpExitCode
ParamCount=2
Header=windows.h.api;
@=GetExitCodeThread
[GetThreadGroupAffinity]
1=[ThreadHandle] hThread
2=PGROUP_AFFINITY GroupAffinity
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=GetThreadGroupAffinity
[GetThreadId]
1=HANDLE Thread
ParamCount=1
Header=windows.h.api;
@=GetThreadId
[GetThreadIdealProcessorEx]
1=[ThreadHandle] hThread
2=PPROCESSOR_NUMBER lpIdealProcessor
ParamCount=2
Header=windows.h.api;
@=GetThreadIdealProcessorEx
[GetThreadInformation]
1=[ThreadHandle] hThread
2=[THREAD_INFORMATION_CLASS] ThreadInformationClass
3=LPVOID ThreadInformation
4=DWORD ThreadInformationSize
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=GetThreadInformation
[GetThreadIOPendingFlag]
1=[ThreadHandle] hThread
2=PBOOL lpIOIsPending
ParamCount=2
Header=windows.h.api;
@=GetThreadIOPendingFlag
[GetThreadPriority]
1=[ThreadHandle] hThread
ParamCount=1
Header=windows.h.api;
@=GetThreadPriority
[GetThreadPriorityBoost]
1=[ThreadHandle] hThread
2=PBOOL pDisablePriorityBoost
ParamCount=2
Header=windows.h.api;
@=GetThreadPriorityBoost
[GetThreadTimes]
1=[ThreadHandle] hThread
2=LPFILETIME lpCreationTime
3=LPFILETIME lpExitTime
4=LPFILETIME lpKernelTime
5=LPFILETIME lpUserTime
ParamCount=5
Header=windows.h.api;
@=GetThreadTimes
[OpenThread]
1=[THREAD_ACCESS_MASK] dwDesiredAccess
2=BOOL bInheritHandle
3=DWORD dwThreadId
ParamCount=3
Header=windows.h.api;
@=OpenThread
[QueryThreadCycleTime]
1=[ThreadHandle] ThreadHandle
2=PULONG64 CycleTime
ParamCount=2
Header=windows.h.api;
@=QueryThreadCycleTime
[ResumeThread]
1=[ThreadHandle] hThread
ParamCount=1
Header=windows.h.api;
@=ResumeThread
[SetThreadAffinityMask]
1=[ThreadHandle] hThread
2=DWORD_PTR dwThreadAffinityMask
ParamCount=2
Header=windows.h.api;
@=SetThreadAffinityMask
[SetThreadGroupAffinity]
1=[ThreadHandle] hThread
2=GROUP_AFFINITY* GroupAffinity
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=SetThreadGroupAffinity
[SetThreadIdealProcessor]
1=[ThreadHandle] hThread
2=DWORD dwIdealProcessor
ParamCount=2
Header=windows.h.api;
@=SetThreadIdealProcessor
[SetThreadIdealProcessorEx]
1=[ThreadHandle] hThread
2=PPROCESSOR_NUMBER lpIdealProcessor
3=PPROCESSOR_NUMBER lpPreviousIdealProcessor
ParamCount=3
Header=windows.h.api;
@=SetThreadIdealProcessorEx
[SetThreadInformation]
1=[ThreadHandle] hThread
2=[THREAD_INFORMATION_CLASS] ThreadInformationClass
3=LPVOID ThreadInformation
4=DWORD ThreadInformationSize
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=SetThreadInformation
[SetThreadPriority]
1=[ThreadHandle] hThread
2=[THREAD_PRIORITY] nPriority
ParamCount=2
Header=windows.h.api;
@=SetThreadPriority
[SetThreadPriorityBoost]
1=[ThreadHandle] hThread
2=BOOL DisablePriorityBoost
ParamCount=2
Header=windows.h.api;
@=SetThreadPriorityBoost
[SetThreadStackGuarantee]
1=PULONG StackSizeInBytes
ParamCount=1
@=SetThreadStackGuarantee
[Sleep]
1=[WaitTimeout] dwMilliseconds
ParamCount=1
Header=windows.h.api;
@=Sleep
[SleepEx]
1=[WaitTimeout] dwMilliseconds
2=BOOL bAlertable
ParamCount=2
Header=windows.h.api;
@=SleepEx
[SuspendThread]
1=[ThreadHandle] hThread
ParamCount=1
Header=windows.h.api;
@=SuspendThread
[SwitchToThread]
ParamCount=0
@=SwitchToThread
[TerminateThread]
1=[ThreadHandle] hThread
2=DWORD dwExitCode
ParamCount=2
Header=windows.h.api;
@=TerminateThread
[TlsAlloc]
ParamCount=0
@=TlsAlloc
[TlsFree]
1=DWORD dwTlsIndex
ParamCount=1
@=TlsFree
[TlsGetValue]
1=DWORD dwTlsIndex
ParamCount=1
@=TlsGetValue
[TlsSetValue]
1=DWORD dwTlsIndex
2=LPVOID lpTlsValue
ParamCount=2
@=TlsSetValue
[DeleteProcThreadAttributeList]
1=LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList
ParamCount=1
Header=native.h.api;
@=DeleteProcThreadAttributeList
[InitializeProcThreadAttributeList]
1=LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList
2=DWORD dwAttributeCount
3=DWORD dwFlags
4=PSIZE_T lpSize
ParamCount=4
Header=native.h.api;
@=InitializeProcThreadAttributeList
[UpdateProcThreadAttribute]
1=LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList
2=DWORD dwFlags
3=[ProcThreadAttribute] Attribute
4=PVOID lpValue
5=SIZE_T cbSize
6=PVOID lpPreviousValue
7=PSIZE_T lpReturnSize
ParamCount=7
Header=native.h.api;
@=UpdateProcThreadAttribute
[IsWow64Process]
1=[ProcessHandle] hProcess
2=PBOOL Wow64Process
ParamCount=2
Header=windows.h.api;
@=IsWow64Process
[Wow64SuspendThread]
1=[ThreadHandle] hThread
ParamCount=1
Header=windows.h.api;
@=Wow64SuspendThread
[AssignProcessToJobObject]
1=HANDLE hJob
2=[ProcessHandle] hProcess
ParamCount=2
Header=windows.h.api;
@=AssignProcessToJobObject
[CreateJobObject]
1=LPSECURITY_ATTRIBUTES lpJobAttributes
2=LPCTSTR lpName
ParamCount=2
Header=security.h.api;
@=CreateJobObject
[IsProcessInJob]
1=HANDLE ProcessHandle
2=HANDLE JobHandle
3=PBOOL Result
ParamCount=3
Header=windows.h.api;
@=IsProcessInJob
[OpenJobObject]
1=DWORD dwDesiredAccess
2=BOOL bInheritHandles
3=LPCTSTR lpName
ParamCount=3
@=OpenJobObject
[QueryInformationJobObject]
1=HANDLE hJob
2=[JOBOBJECTINFOCLASS] JobObjectInfoClass
3=LPVOID lpJobObjectInfo
4=DWORD cbJobObjectInfoLength
5=LPDWORD lpReturnLength
ParamCount=5
Header=windows.h.api;
@=QueryInformationJobObject
[SetInformationJobObject]
1=HANDLE hJob
2=[JOBOBJECTINFOCLASS] JobObjectInfoClass
3=LPVOID lpJobObjectInfo
4=DWORD cbJobObjectInfoLength
ParamCount=4
Header=windows.h.api;
@=SetInformationJobObject
[TerminateJobObject]
1=HANDLE hJob
2=UINT uExitCode
ParamCount=2
Header=windows.h.api;
@=TerminateJobObject
[CallbackMayRunLong]
1=PTP_CALLBACK_INSTANCE pci
ParamCount=1
Header=kernel32.h.api;
@=CallbackMayRunLong
[CancelThreadpoolIo]
1=PTP_IO pio
ParamCount=1
Header=kernel32.h.api;
@=CancelThreadpoolIo
[CloseThreadpool]
1=PTP_POOL ptpp
ParamCount=1
Header=kernel32.h.api;
@=CloseThreadpool
[CloseThreadpoolCleanupGroup]
1=PTP_CLEANUP_GROUP ptpcg
ParamCount=1
Header=kernel32.h.api;
@=CloseThreadpoolCleanupGroup
[CloseThreadpoolCleanupGroupMembers]
1=PTP_CLEANUP_GROUP ptpcg
2=BOOL fCancelPendingCallbacks
3=PVOID pvCleanupContext
ParamCount=3
Header=kernel32.h.api;
@=CloseThreadpoolCleanupGroupMembers
[CloseThreadpoolIo]
1=PTP_IO pio
ParamCount=1
Header=kernel32.h.api;
@=CloseThreadpoolIo
[CloseThreadpoolTimer]
1=PTP_TIMER pti
ParamCount=1
Header=kernel32.h.api;
@=CloseThreadpoolTimer
[CloseThreadpoolWait]
1=PTP_WAIT pwa
ParamCount=1
Header=kernel32.h.api;
@=CloseThreadpoolWait
[CloseThreadpoolWork]
1=PTP_WORK pwk
ParamCount=1
Header=kernel32.h.api;
@=CloseThreadpoolWork
[CreateThreadpool]
1=PVOID reserved
ParamCount=1
@=CreateThreadpool
[CreateThreadpoolCleanupGroup]
ParamCount=0
@=CreateThreadpoolCleanupGroup
[CreateThreadpoolIo]
1=HANDLE fl
2=PTP_WIN32_IO_CALLBACK pfnio
3=PVOID pv
4=PTP_CALLBACK_ENVIRON pcbe
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=CreateThreadpoolIo
[CreateThreadpoolTimer]
1=PTP_TIMER_CALLBACK pfnti
2=PVOID pv
3=PTP_CALLBACK_ENVIRON pcbe
ParamCount=3
Header=kernel32.h.api;
@=CreateThreadpoolTimer
[CreateThreadpoolWait]
1=PTP_WAIT_CALLBACK pfnwa
2=PVOID pv
3=PTP_CALLBACK_ENVIRON pcbe
ParamCount=3
Header=kernel32.h.api;
@=CreateThreadpoolWait
[CreateThreadpoolWork]
1=PTP_WORK_CALLBACK pfnwk
2=PVOID pv
3=PTP_CALLBACK_ENVIRON pcbe
ParamCount=3
Header=kernel32.h.api;
@=CreateThreadpoolWork
[DisassociateCurrentThreadFromCallback]
1=PTP_CALLBACK_INSTANCE pci
ParamCount=1
Header=kernel32.h.api;
@=DisassociateCurrentThreadFromCallback
[FreeLibraryWhenCallbackReturns]
1=PTP_CALLBACK_INSTANCE pci
2=HMODULE mod
ParamCount=2
Header=kernel32.h.api;
@=FreeLibraryWhenCallbackReturns
[IsThreadpoolTimerSet]
1=PTP_TIMER pti
ParamCount=1
Header=kernel32.h.api;
@=IsThreadpoolTimerSet
[LeaveCriticalSectionWhenCallbackReturns]
1=PTP_CALLBACK_INSTANCE pci
2=PCRITICAL_SECTION pcs
ParamCount=2
Header=kernel32.h.api;
@=LeaveCriticalSectionWhenCallbackReturns
[QueryThreadpoolStackInformation]
1=PTP_POOL ptpp
2=PTP_POOL_STACK_INFORMATION ptpsi
ParamCount=2
Header=kernel32.h.api;
@=QueryThreadpoolStackInformation
[ReleaseMutexWhenCallbackReturns]
1=PTP_CALLBACK_INSTANCE pci
2=HANDLE mut
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=ReleaseMutexWhenCallbackReturns
[ReleaseSemaphoreWhenCallbackReturns]
1=PTP_CALLBACK_INSTANCE pci
2=HANDLE sem
3=DWORD crel
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=ReleaseSemaphoreWhenCallbackReturns
[SetEventWhenCallbackReturns]
1=PTP_CALLBACK_INSTANCE pci
2=HANDLE evt
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=SetEventWhenCallbackReturns
[SetThreadpoolStackInformation]
1=PTP_POOL ptpp
2=PTP_POOL_STACK_INFORMATION ptpsi
ParamCount=2
Header=kernel32.h.api;
@=SetThreadpoolStackInformation
[SetThreadpoolThreadMaximum]
1=PTP_POOL ptpp
2=DWORD cthrdMost
ParamCount=2
Header=kernel32.h.api;
@=SetThreadpoolThreadMaximum
[SetThreadpoolThreadMinimum]
1=PTP_POOL ptpp
2=DWORD cthrdMic
ParamCount=2
Header=kernel32.h.api;
@=SetThreadpoolThreadMinimum
[SetThreadpoolTimer]
1=PTP_TIMER pti
2=PFILETIME pftDueTime
3=DWORD msPeriod
4=DWORD msWindowLength
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=SetThreadpoolTimer
[SetThreadpoolWait]
1=PTP_WAIT pwa
2=HANDLE h
3=PFILETIME pftTimeout
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=SetThreadpoolWait
[StartThreadpoolIo]
1=PTP_IO pio
ParamCount=1
Header=kernel32.h.api;
@=StartThreadpoolIo
[SubmitThreadpoolWork]
1=PTP_WORK pwk
ParamCount=1
Header=kernel32.h.api;
@=SubmitThreadpoolWork
[TrySubmitThreadpoolCallback]
1=PTP_SIMPLE_CALLBACK pfns
2=PVOID pv
3=PTP_CALLBACK_ENVIRON pcbe
ParamCount=3
Header=kernel32.h.api;
@=TrySubmitThreadpoolCallback
[WaitForThreadpoolIoCallbacks]
1=PTP_IO pio
2=BOOL fCancelPendingCallbacks
ParamCount=2
Header=kernel32.h.api;
@=WaitForThreadpoolIoCallbacks
[WaitForThreadpoolTimerCallbacks]
1=PTP_TIMER pti
2=BOOL fCancelPendingCallbacks
ParamCount=2
Header=kernel32.h.api;
@=WaitForThreadpoolTimerCallbacks
[WaitForThreadpoolWaitCallbacks]
1=PTP_WAIT pwa
2=BOOL fCancelPendingCallbacks
ParamCount=2
Header=kernel32.h.api;
@=WaitForThreadpoolWaitCallbacks
[WaitForThreadpoolWorkCallbacks]
1=PTP_WORK pwk
2=BOOL fCancelPendingCallbacks
ParamCount=2
Header=kernel32.h.api;
@=WaitForThreadpoolWorkCallbacks
[BindIoCompletionCallback]
1=HANDLE FileHandle
2=LPOVERLAPPED_COMPLETION_ROUTINE Function
3=ULONG Flags
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=BindIoCompletionCallback
[QueueUserWorkItem]
1=LPTHREAD_START_ROUTINE Function
2=PVOID Context
3=[WorkItemFlags] Flags
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=QueueUserWorkItem
[ConvertFiberToThread]
ParamCount=0
@=ConvertFiberToThread
[ConvertThreadToFiber]
1=LPVOID lpParameter
ParamCount=1
@=ConvertThreadToFiber
[ConvertThreadToFiberEx]
1=LPVOID lpParameter
2=DWORD dwFlags
ParamCount=2
@=ConvertThreadToFiberEx
[CreateFiber]
1=SIZE_T dwStackSize
2=LPFIBER_START_ROUTINE lpStartAddress
3=LPVOID lpParameter
ParamCount=3
Header=kernel32.h.api;
@=CreateFiber
[CreateFiberEx]
1=SIZE_T dwStackCommitSize
2=SIZE_T dwStackReserveSize
3=DWORD dwFlags
4=LPFIBER_START_ROUTINE lpStartAddress
5=LPVOID lpParameter
ParamCount=5
Header=kernel32.h.api;
@=CreateFiberEx
[DeleteFiber]
1=LPVOID lpFiber
ParamCount=1
@=DeleteFiber
[FlsAlloc]
1=PFLS_CALLBACK_FUNCTION lpCallback
ParamCount=1
Header=kernel32.h.api;
@=FlsAlloc
[FlsFree]
1=DWORD dwFlsIndex
ParamCount=1
@=FlsFree
[FlsGetValue]
1=DWORD dwFlsIndex
ParamCount=1
@=FlsGetValue
[FlsSetValue]
1=DWORD dwFlsIndex
2=PVOID lpFlsData
ParamCount=2
@=FlsSetValue
[IsThreadAFiber]
ParamCount=0
@=IsThreadAFiber
[SwitchToFiber]
1=LPVOID lpFiber
ParamCount=1
@=SwitchToFiber
[AllocateUserPhysicalPagesNuma]
1=[ProcessHandle] hProcess
2=PULONG_PTR NumberOfPages
3=PULONG_PTR PageArray
4=DWORD nndPreferred
ParamCount=4
Header=windows.h.api;
@=AllocateUserPhysicalPagesNuma
[GetNumaAvailableMemoryNode]
1=UCHAR Node
2=PULONGLONG AvailableBytes
ParamCount=2
@=GetNumaAvailableMemoryNode
[GetNumaAvailableMemoryNodeEx]
1=USHORT Node
2=PULONGLONG AvailableBytes
ParamCount=2
@=GetNumaAvailableMemoryNodeEx
[GetNumaHighestNodeNumber]
1=PULONG HighestNodeNumber
ParamCount=1
@=GetNumaHighestNodeNumber
[GetNumaNodeNumberFromHandle]
1=HANDLE hFile
2=PUSHORT NodeNumber
ParamCount=2
Header=windows.h.api;
@=GetNumaNodeNumberFromHandle
[GetNumaNodeProcessorMask]
1=UCHAR Node
2=PULONGLONG ProcessorMask
ParamCount=2
@=GetNumaNodeProcessorMask
[GetNumaNodeProcessorMaskEx]
1=USHORT Node
2=PGROUP_AFFINITY ProcessorMask
ParamCount=2
Header=kernel32.h.api;
@=GetNumaNodeProcessorMaskEx
[GetNumaProcessorNode]
1=UCHAR Processor
2=PUCHAR NodeNumber
ParamCount=2
@=GetNumaProcessorNode
[GetNumaProcessorNodeEx]
1=PPROCESSOR_NUMBER Processor
2=PUSHORT NodeNumber
ParamCount=2
Header=windows.h.api;
@=GetNumaProcessorNodeEx
[GetNumaProximityNode]
1=ULONG ProximityId
2=PUCHAR NodeNumber
ParamCount=2
@=GetNumaProximityNode
[GetNumaProximityNodeEx]
1=ULONG ProximityId
2=PUSHORT NodeNumber
ParamCount=2
@=GetNumaProximityNodeEx
[GetActiveProcessorCount]
1=WORD GroupNumber
ParamCount=1
@=GetActiveProcessorCount
[GetActiveProcessorGroupCount]
ParamCount=0
@=GetActiveProcessorGroupCount
[GetCurrentProcessorNumber]
ParamCount=0
@=GetCurrentProcessorNumber
[GetCurrentProcessorNumberEx]
1=PPROCESSOR_NUMBER ProcNumber
ParamCount=1
Header=windows.h.api;
@=GetCurrentProcessorNumberEx
[GetLogicalProcessorInformation]
1=PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer
2=PDWORD ReturnLength
ParamCount=2
Header=kernel32.h.api;
@=GetLogicalProcessorInformation
[GetLogicalProcessorInformationEx]
1=[LOGICAL_PROCESSOR_RELATIONSHIP] RelationshipType
2=PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer
3=PDWORD ReturnedLength
ParamCount=3
Header=kernel32.h.api;
@=GetLogicalProcessorInformationEx
[GetMaximumProcessorCount]
1=WORD GroupNumber
ParamCount=1
@=GetMaximumProcessorCount
[GetMaximumProcessorGroupCount]
ParamCount=0
@=GetMaximumProcessorGroupCount
[QueryIdleProcessorCycleTime]
1=PULONG BufferLength
2=PULONG64 ProcessorIdleCycleTime
ParamCount=2
@=QueryIdleProcessorCycleTime
[QueryIdleProcessorCycleTimeEx]
1=USHORT Group
2=PULONG BufferLength
3=PULONG64 ProcessorIdleCycleTime
ParamCount=3
@=QueryIdleProcessorCycleTimeEx
[CreateUmsCompletionList]
1=PUMS_COMPLETION_LIST* UmsCompletionList
ParamCount=1
Header=kernel32.h.api;
@=CreateUmsCompletionList
[CreateUmsThreadContext]
1=PUMS_CONTEXT* lpUmsThread
ParamCount=1
Header=kernel32.h.api;
@=CreateUmsThreadContext
[DeleteUmsCompletionList]
1=PUMS_COMPLETION_LIST UmsCompletionList
ParamCount=1
Header=kernel32.h.api;
@=DeleteUmsCompletionList
[DeleteUmsThreadContext]
1=PUMS_CONTEXT UmsThread
ParamCount=1
Header=kernel32.h.api;
@=DeleteUmsThreadContext
[DequeueUmsCompletionListItems]
1=PUMS_COMPLETION_LIST UmsCompletionList
2=DWORD WaitTimeOut
3=PUMS_CONTEXT* UmsThreadList
ParamCount=3
Header=kernel32.h.api;
@=DequeueUmsCompletionListItems
[EnterUmsSchedulingMode]
1=PUMS_SCHEDULER_STARTUP_INFO SchedulerStartupInfo
ParamCount=1
Header=kernel32.h.api;
@=EnterUmsSchedulingMode
[ExecuteUmsThread]
1=PUMS_CONTEXT UmsThread
ParamCount=1
Header=kernel32.h.api;
@=ExecuteUmsThread
[GetCurrentUmsThread]
ParamCount=0
@=GetCurrentUmsThread
[GetNextUmsListItem]
1=PUMS_CONTEXT UmsContext
ParamCount=1
Header=kernel32.h.api;
@=GetNextUmsListItem
[GetUmsCompletionListEvent]
1=PUMS_COMPLETION_LIST UmsCompletionList
2=PHANDLE UmsCompletionEvent
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=GetUmsCompletionListEvent
[GetUmsSystemThreadInformation]
1=[ThreadHandle] ThreadHandle
2=PUMS_SYSTEM_THREAD_INFORMATION SystemThreadInfo
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=GetUmsSystemThreadInformation
[QueryUmsThreadInformation]
1=PUMS_CONTEXT UmsThread
2=[UMS_THREAD_INFO_CLASS] UmsThreadInfoClass
3=PVOID UmsThreadInformation
4=ULONG UmsThreadInformationLength
5=PULONG ReturnLength
ParamCount=5
Header=kernel32.h.api;
@=QueryUmsThreadInformation
[SetUmsThreadInformation]
1=PUMS_CONTEXT UmsThread
2=[UMS_THREAD_INFO_CLASS] UmsThreadInfoClass
3=PVOID UmsThreadInformation
4=ULONG UmsThreadInformationLength
ParamCount=4
Header=kernel32.h.api;
@=SetUmsThreadInformation
[UmsThreadYield]
1=PVOID SchedulerParam
ParamCount=1
@=UmsThreadYield
[WinExec]
1=LPCSTR lpCmdLine
2=[ShowWindowCmd] uCmdShow
ParamCount=2
Header=windows.h.api;
@=WinExec
[ActivateActCtx]
1=HANDLE hActCtx
2=ULONG_PTR* lpCookie
ParamCount=2
Header=windows.h.api;
@=ActivateActCtx
[AddRefActCtx]
1=HANDLE hActCtx
ParamCount=1
Header=windows.h.api;
@=AddRefActCtx
[CreateActCtx]
1=PACTCTX pActCtx
ParamCount=1
Header=windows.h.api;
@=CreateActCtx
[DeactivateActCtx]
1=[DeactivateActCtxFlags] dwFlags
2=ULONG_PTR ulCookie
ParamCount=2
Header=kernel32.h.api;
@=DeactivateActCtx
[FindActCtxSectionGuid]
1=[FIND_ACTCTX_SECTION_FLAGS] dwFlags
2=GUID* lpExtensionGuid
3=[ACTIVATION_CONTEXT_SECTION] ulSectionId
4=GUID* lpGuidToFind
5=PACTCTX_SECTION_KEYED_DATA ReturnedData
ParamCount=5
Header=kernel32.h.api;windows.h.api;
@=FindActCtxSectionGuid
[FindActCtxSectionString]
1=[FIND_ACTCTX_SECTION_FLAGS] dwFlags
2=GUID* lpExtensionGuid
3=[ACTIVATION_CONTEXT_SECTION] ulSectionId
4=LPCTSTR lpStringToFind
5=PACTCTX_SECTION_KEYED_DATA ReturnedData
ParamCount=5
Header=kernel32.h.api;windows.h.api;
@=FindActCtxSectionString
[GetCurrentActCtx]
1=HANDLE* lphActCtx
ParamCount=1
Header=windows.h.api;
@=GetCurrentActCtx
[QueryActCtxW]
1=[QueryActCtxFlags] dwFlags
2=HANDLE hActCtx
3=PVOID pvSubInstance
4=[ActivationContextInfoClass] ulInfoClass
5=PVOID pvBuffer
6=SIZE_T cbBuffer
7=SIZE_T* pcbWrittenOrRequired
ParamCount=7
Header=kernel32.h.api;windows.h.api;
@=QueryActCtxW
[QueryActCtxSettingsW]
1=DWORD dwFlags
2=HANDLE hActCtx
3=PCWSTR settingsNameSpace
4=PCWSTR settingName
5=PWSTR pvBuffer
6=SIZE_T dwBuffer
7=SIZE_T* pdwWrittenOrRequired
ParamCount=7
Header=windows.h.api;
@=QueryActCtxSettingsW
[ReleaseActCtx]
1=HANDLE hActCtx
ParamCount=1
Header=windows.h.api;
@=ReleaseActCtx
[ZombifyActCtx]
1=HANDLE hActCtx
ParamCount=1
Header=windows.h.api;
@=ZombifyActCtx
[AddAtom]
1=LPCTSTR lpString
ParamCount=1
@=AddAtom
[DeleteAtom]
1=ATOM nAtom
ParamCount=1
Header=windows.h.api;
@=DeleteAtom
[FindAtom]
1=LPCTSTR lpString
ParamCount=1
@=FindAtom
[GetAtomName]
1=ATOM nAtom
2=LPTSTR lpBuffer
3=int nSize
ParamCount=3
Header=windows.h.api;
@=GetAtomName
[GlobalAddAtom]
1=LPCTSTR lpString
ParamCount=1
@=GlobalAddAtom
[GlobalDeleteAtom]
1=ATOM nAtom
ParamCount=1
Header=windows.h.api;
@=GlobalDeleteAtom
[GlobalFindAtom]
1=LPCTSTR lpString
ParamCount=1
@=GlobalFindAtom
[GlobalGetAtomName]
1=ATOM nAtom
2=LPTSTR lpBuffer
3=int nSize
ParamCount=3
Header=windows.h.api;
@=GlobalGetAtomName
[InitAtomTable]
1=DWORD nSize
ParamCount=1
@=InitAtomTable
[BuildCommDCB]
1=LPCTSTR lpDef
2=LPDCB lpDCB
ParamCount=2
Header=kernel32.h.api;
@=BuildCommDCB
[BuildCommDCBAndTimeouts]
1=LPCTSTR lpDef
2=LPDCB lpDCB
3=LPCOMMTIMEOUTS lpCommTimeouts
ParamCount=3
Header=kernel32.h.api;
@=BuildCommDCBAndTimeouts
[ClearCommBreak]
1=HANDLE hFile
ParamCount=1
Header=windows.h.api;
@=ClearCommBreak
[ClearCommError]
1=HANDLE hFile
2=LPDWORD lpErrors
3=LPCOMSTAT lpStat
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=ClearCommError
[CommConfigDialog]
1=LPCTSTR lpszName
2=HWND hWnd
3=LPCOMMCONFIG lpCC
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=CommConfigDialog
[EscapeCommFunction]
1=HANDLE hFile
2=[COMM_FUNCTION] dwFunc
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=EscapeCommFunction
[GetCommConfig]
1=HANDLE hCommDev
2=LPCOMMCONFIG lpCC
3=LPDWORD lpdwSize
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=GetCommConfig
[GetCommMask]
1=HANDLE hFile
2=[COMM_EVENT*] lpEvtMask
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=GetCommMask
[GetCommModemStatus]
1=HANDLE hFile
2=[MODEM_STATUS_FLAGS*] lpModemStat
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=GetCommModemStatus
[GetCommProperties]
1=HANDLE hFile
2=LPCOMMPROP lpCommProp
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=GetCommProperties
[GetCommState]
1=HANDLE hFile
2=LPDCB lpDCB
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=GetCommState
[GetCommTimeouts]
1=HANDLE hFile
2=LPCOMMTIMEOUTS lpCommTimeouts
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=GetCommTimeouts
[GetDefaultCommConfig]
1=LPCTSTR lpszName
2=LPCOMMCONFIG lpCC
3=LPDWORD lpdwSize
ParamCount=3
Header=kernel32.h.api;
@=GetDefaultCommConfig
[PurgeComm]
1=HANDLE hFile
2=[PURGE_FLAGS] dwFlags
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=PurgeComm
[SetCommBreak]
1=HANDLE hFile
ParamCount=1
Header=windows.h.api;
@=SetCommBreak
[SetCommConfig]
1=HANDLE hCommDev
2=LPCOMMCONFIG lpCC
3=DWORD dwSize
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=SetCommConfig
[SetCommMask]
1=HANDLE hFile
2=[COMM_EVENT] dwEvtMask
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=SetCommMask
[SetCommState]
1=HANDLE hFile
2=LPDCB lpDCB
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=SetCommState
[SetCommTimeouts]
1=HANDLE hFile
2=LPCOMMTIMEOUTS lpCommTimeouts
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=SetCommTimeouts
[SetDefaultCommConfig]
1=LPCTSTR lpszName
2=LPCOMMCONFIG lpCC
3=DWORD dwSize
ParamCount=3
Header=kernel32.h.api;
@=SetDefaultCommConfig
[SetupComm]
1=HANDLE hFile
2=DWORD dwInQueue
3=DWORD dwOutQueue
ParamCount=3
Header=windows.h.api;
@=SetupComm
[TransmitCommChar]
1=HANDLE hFile
2=char cChar
ParamCount=2
Header=windows.h.api;
@=TransmitCommChar
[WaitCommEvent]
1=HANDLE hFile
2=[COMM_EVENT*] lpEvtMask
3=LPOVERLAPPED lpOverlapped
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=WaitCommEvent
[AddConsoleAlias]
1=LPCTSTR Source
2=LPCTSTR Target
3=LPCTSTR ExeName
ParamCount=3
@=AddConsoleAlias
[AllocConsole]
ParamCount=0
@=AllocConsole
[AttachConsole]
1=DWORD dwProcessId
ParamCount=1
@=AttachConsole
[CreateConsoleScreenBuffer]
1=DWORD dwDesiredAccess
2=[FILE_SHARE_MODE] dwShareMode
3=SECURITY_ATTRIBUTES* lpSecurityAttributes
4=[CONSOLE_TEXTMODE_FLAGS] dwFlags
5=LPVOID lpScreenBufferData
ParamCount=5
Header=kernel32.h.api;native.h.api;security.h.api;
@=CreateConsoleScreenBuffer
[FillConsoleOutputAttribute]
1=HANDLE hConsoleOutput
2=[ConsoleAttribute] wAttribute
3=DWORD nLength
4=COORD dwWriteCoord
5=LPDWORD lpNumberOfAttrsWritten
ParamCount=5
Header=kernel32.h.api;windows.h.api;
@=FillConsoleOutputAttribute
[FillConsoleOutputCharacter]
1=HANDLE hConsoleOutput
2=TCHAR cCharacter
3=DWORD nLength
4=COORD dwWriteCoord
5=LPDWORD lpNumberOfCharsWritten
ParamCount=5
Header=windows.h.api;
@=FillConsoleOutputCharacter
[FlushConsoleInputBuffer]
1=HANDLE hConsoleInput
ParamCount=1
Header=windows.h.api;
@=FlushConsoleInputBuffer
[FreeConsole]
ParamCount=0
@=FreeConsole
[GenerateConsoleCtrlEvent]
1=DWORD dwCtrlEvent
2=DWORD dwProcessGroupId
ParamCount=2
@=GenerateConsoleCtrlEvent
[GetConsoleAlias]
1=LPTSTR lpSource
2=LPTSTR lpTargetBuffer
3=DWORD TargetBufferLength
4=LPTSTR lpExeName
ParamCount=4
@=GetConsoleAlias
[GetConsoleAliases]
1=LPTSTR lpAliasBuffer
2=DWORD AliasBufferLength
3=LPTSTR lpExeName
ParamCount=3
@=GetConsoleAliases
[GetConsoleAliasesLength]
1=LPTSTR lpExeName
ParamCount=1
@=GetConsoleAliasesLength
[GetConsoleAliasExes]
1=LPTSTR lpExeNameBuffer
2=DWORD ExeNameBufferLength
ParamCount=2
@=GetConsoleAliasExes
[GetConsoleAliasExesLength]
ParamCount=0
@=GetConsoleAliasExesLength
[GetConsoleCP]
ParamCount=0
@=GetConsoleCP
[GetConsoleCursorInfo]
1=HANDLE hConsoleOutput
2=PCONSOLE_CURSOR_INFO lpConsoleCursorInfo
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=GetConsoleCursorInfo
[GetConsoleDisplayMode]
1=[CONSOLE_FULLSCREEN_MODE*] lpModeFlags
ParamCount=1
Header=kernel32.h.api;
@=GetConsoleDisplayMode
[GetConsoleFontSize]
1=HANDLE hConsoleOutput
2=DWORD nFont
ParamCount=2
Header=windows.h.api;
@=GetConsoleFontSize
[GetConsoleHistoryInfo]
1=PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo
ParamCount=1
Header=kernel32.h.api;
@=GetConsoleHistoryInfo
[GetConsoleMode]
1=HANDLE hConsoleHandle
2=[ConsoleModeFlags*] lpMode
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=GetConsoleMode
[GetConsoleOriginalTitle]
1=LPTSTR lpConsoleTitle
2=DWORD nSize
ParamCount=2
@=GetConsoleOriginalTitle
[GetConsoleOutputCP]
ParamCount=0
@=GetConsoleOutputCP
[GetConsoleProcessList]
1=LPDWORD lpdwProcessList
2=DWORD dwProcessCount
ParamCount=2
@=GetConsoleProcessList
[GetConsoleScreenBufferInfo]
1=HANDLE hConsoleOutput
2=PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=GetConsoleScreenBufferInfo
[GetConsoleScreenBufferInfoEx]
1=HANDLE hConsoleOutput
2=PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=GetConsoleScreenBufferInfoEx
[GetConsoleSelectionInfo]
1=PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo
ParamCount=1
Header=kernel32.h.api;
@=GetConsoleSelectionInfo
[GetConsoleTitle]
1=LPTSTR lpConsoleTitle
2=DWORD nSize
ParamCount=2
@=GetConsoleTitle
[GetConsoleWindow]
ParamCount=0
@=GetConsoleWindow
[GetCurrentConsoleFont]
1=HANDLE hConsoleOutput
2=BOOL bMaximumWindow
3=PCONSOLE_FONT_INFO lpConsoleCurrentFont
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=GetCurrentConsoleFont
[GetCurrentConsoleFontEx]
1=HANDLE hConsoleOutput
2=BOOL bMaximumWindow
3=PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=GetCurrentConsoleFontEx
[GetLargestConsoleWindowSize]
1=HANDLE hConsoleOutput
ParamCount=1
Header=windows.h.api;
@=GetLargestConsoleWindowSize
[GetNumberOfConsoleInputEvents]
1=HANDLE hConsoleInput
2=LPDWORD lpcNumberOfEvents
ParamCount=2
Header=windows.h.api;
@=GetNumberOfConsoleInputEvents
[GetNumberOfConsoleMouseButtons]
1=LPDWORD lpNumberOfMouseButtons
ParamCount=1
@=GetNumberOfConsoleMouseButtons
[GetStdHandle]
1=[StdHandle] nStdHandle
ParamCount=1
Header=kernel32.h.api;
@=GetStdHandle
[PeekConsoleInput]
1=HANDLE hConsoleInput
2=PINPUT_RECORD lpBuffer
3=DWORD nLength
4=LPDWORD lpNumberOfEventsRead
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=PeekConsoleInput
[ReadConsole]
1=HANDLE hConsoleInput
2=LPVOID lpBuffer
3=DWORD nNumberOfCharsToRead
4=LPDWORD lpNumberOfCharsRead
5=LPVOID pInputControl
ParamCount=5
Header=windows.h.api;
@=ReadConsole
[ReadConsoleInput]
1=HANDLE hConsoleInput
2=PINPUT_RECORD lpBuffer
3=DWORD nLength
4=LPDWORD lpNumberOfEventsRead
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=ReadConsoleInput
[ReadConsoleOutput]
1=HANDLE hConsoleOutput
2=PCHAR_INFO lpBuffer
3=COORD dwBufferSize
4=COORD dwBufferCoord
5=PSMALL_RECT lpReadRegion
ParamCount=5
Header=kernel32.h.api;windows.h.api;
@=ReadConsoleOutput
[ReadConsoleOutputAttribute]
1=HANDLE hConsoleOutput
2=[ConsoleAttribute*] lpAttribute
3=DWORD nLength
4=COORD dwReadCoord
5=LPDWORD lpNumberOfAttrsRead
ParamCount=5
Header=kernel32.h.api;windows.h.api;
@=ReadConsoleOutputAttribute
[ReadConsoleOutputCharacter]
1=HANDLE hConsoleOutput
2=LPTSTR lpCharacter
3=DWORD nLength
4=COORD dwReadCoord
5=LPDWORD lpNumberOfCharsRead
ParamCount=5
Header=windows.h.api;
@=ReadConsoleOutputCharacter
[ScrollConsoleScreenBuffer]
1=HANDLE hConsoleOutput
2=SMALL_RECT* lpScrollRectangle
3=SMALL_RECT* lpClipRectangle
4=COORD dwDestinationOrigin
5=CHAR_INFO* lpFill
ParamCount=5
Header=kernel32.h.api;windows.h.api;
@=ScrollConsoleScreenBuffer
[SetConsoleActiveScreenBuffer]
1=HANDLE hConsoleOutput
ParamCount=1
Header=windows.h.api;
@=SetConsoleActiveScreenBuffer
[SetConsoleCP]
1=[CodePageEnum] wCodePageID
ParamCount=1
Header=windows.h.api;
@=SetConsoleCP
[SetConsoleCtrlHandler]
1=PHANDLER_ROUTINE HandlerRoutine
2=BOOL Add
ParamCount=2
Header=kernel32.h.api;
@=SetConsoleCtrlHandler
[SetConsoleCursorInfo]
1=HANDLE hConsoleOutput
2=CONSOLE_CURSOR_INFO* lpConsoleCursorInfo
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=SetConsoleCursorInfo
[SetConsoleCursorPosition]
1=HANDLE hConsoleOutput
2=COORD dwCursorPosition
ParamCount=2
Header=windows.h.api;
@=SetConsoleCursorPosition
[SetConsoleDisplayMode]
1=HANDLE hConsoleOutput
2=[CONSOLE_DISPLAY_MODE] dwFlags
3=PCOORD lpNewScreenBufferDimensions
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=SetConsoleDisplayMode
[SetConsoleHistoryInfo]
1=PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo
ParamCount=1
Header=kernel32.h.api;
@=SetConsoleHistoryInfo
[SetConsoleMode]
1=HANDLE hConsoleHandle
2=[ConsoleModeFlags] dwMode
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=SetConsoleMode
[SetConsoleOutputCP]
1=[CodePageEnum] wCodePageID
ParamCount=1
Header=windows.h.api;
@=SetConsoleOutputCP
[SetConsoleScreenBufferInfoEx]
1=HANDLE hConsoleOutput
2=PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=SetConsoleScreenBufferInfoEx
[SetConsoleScreenBufferSize]
1=HANDLE hConsoleOutput
2=COORD dwSize
ParamCount=2
Header=windows.h.api;
@=SetConsoleScreenBufferSize
[SetConsoleTextAttribute]
1=HANDLE hConsoleOutput
2=[ConsoleAttribute] wAttributes
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=SetConsoleTextAttribute
[SetConsoleTitle]
1=LPCTSTR lpConsoleTitle
ParamCount=1
@=SetConsoleTitle
[SetConsoleWindowInfo]
1=HANDLE hConsoleOutput
2=BOOL bAbsolute
3=SMALL_RECT* lpConsoleWindow
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=SetConsoleWindowInfo
[SetCurrentConsoleFontEx]
1=HANDLE hConsoleOutput
2=BOOL bMaximumWindow
3=PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=SetCurrentConsoleFontEx
[SetStdHandle]
1=[StdHandle] nStdHandle
2=HANDLE hHandle
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=SetStdHandle
[WriteConsole]
1=HANDLE hConsoleOutput
2=LPCTSTR lpBuffer
3=DWORD nNumberOfCharsToWrite
4=LPDWORD lpNumberOfCharsWritten
5=LPVOID lpReserved
ParamCount=5
Header=windows.h.api;
@=WriteConsole
[WriteConsoleInput]
1=HANDLE hConsoleInput
2=INPUT_RECORD* lpBuffer
3=DWORD nLength
4=LPDWORD lpNumberOfEventsWritten
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=WriteConsoleInput
[WriteConsoleOutput]
1=HANDLE hConsoleOutput
2=CHAR_INFO* lpBuffer
3=COORD dwBufferSize
4=COORD dwBufferCoord
5=PSMALL_RECT lpWriteRegion
ParamCount=5
Header=kernel32.h.api;windows.h.api;
@=WriteConsoleOutput
[WriteConsoleOutputAttribute]
1=HANDLE hConsoleOutput
2=[ConsoleAttribute*] lpAttribute
3=DWORD nLength
4=COORD dwWriteCoord
5=LPDWORD lpNumberOfAttrsWritten
ParamCount=5
Header=kernel32.h.api;windows.h.api;
@=WriteConsoleOutputAttribute
[WriteConsoleOutputCharacter]
1=HANDLE hConsoleOutput
2=LPCTSTR lpCharacter
3=DWORD nLength
4=COORD dwWriteCoord
5=LPDWORD lpNumberOfCharsWritten
ParamCount=5
Header=windows.h.api;
@=WriteConsoleOutputCharacter
[SetConsoleInputExeName]
1=LPCTSTR lpName
ParamCount=1
@=SetConsoleInputExeName
[DeviceIoControl]
1=HANDLE hDevice
2=[IOCTL] dwIoControlCode
3=LPVOID lpInBuffer
4=DWORD nInBufferSize
5=LPVOID lpOutBuffer
6=DWORD nOutBufferSize
7=LPDWORD lpBytesReturned
8=LPOVERLAPPED lpOverlapped
ParamCount=8
Header=ioctl.h.api;windows.h.api;
@=DeviceIoControl
[Beep]
1=DWORD dwFreq
2=DWORD dwDuration
ParamCount=2
@=Beep
[RtlCaptureStackBackTrace]
1=ULONG FramesToSkip
2=ULONG FramesToCapture
3=PVOID* BackTrace
4=PULONG BackTraceHash
ParamCount=4
@=RtlCaptureStackBackTrace
[FatalAppExit]
1=UINT uAction
2=LPCTSTR lpMessageText
ParamCount=2
@=FatalAppExit
[FormatMessage]
1=[FormatMessageFlags] dwFlags
2=LPCVOID lpSource
3=DWORD dwMessageId
4=DWORD dwLanguageId
5=LPTSTR lpBuffer
6=DWORD nSize
7=va_list* Arguments
ParamCount=7
Header=kernel32.h.api;
@=FormatMessage
[GetErrorMode]
ParamCount=0
@=GetErrorMode
[GetLastError]
ParamCount=0
@=GetLastError
[GetThreadErrorMode]
ParamCount=0
@=GetThreadErrorMode
[RtlLookupFunctionEntry]
1=ULONGLONG ControlPC
2=PULONGLONG ImageBase
3=PULONGLONG TargetGp
ParamCount=3
@=RtlLookupFunctionEntry
[RtlPcToFileHeader]
1=PVOID PcValue
2=PVOID* BaseOfImage
ParamCount=2
@=RtlPcToFileHeader
[SetErrorMode]
1=[SEM_FLAGS] uMode
ParamCount=1
Header=kernel32.h.api;
@=SetErrorMode
[SetLastError]
1=[ERROR_CODE] dwErrCode
ParamCount=1
@=SetLastError
[SetThreadErrorMode]
1=[SEM_FLAGS_DWORD] dwNewMode
2=[SEM_FLAGS_DWORD*] lpOldMode
ParamCount=2
Header=kernel32.h.api;
@=SetThreadErrorMode
[CloseHandle]
1=HANDLE hObject
ParamCount=1
Header=windows.h.api;
@=CloseHandle
[DuplicateHandle]
1=[ProcessHandle] hSourceProcessHandle
2=[PROCESS_THREAD_HANDLE] hSourceHandle
3=[ProcessHandle] hTargetProcessHandle
4=LPHANDLE lpTargetHandle
5=[StandardAccessRights] dwDesiredAccess
6=BOOL bInheritHandle
7=[DUPLICATE_HANDLE_FLAGS] dwOptions
ParamCount=7
Header=kernel32.h.api;windows.h.api;
@=DuplicateHandle
[GetHandleInformation]
1=HANDLE hObject
2=[HANDLE_FLAGS*] lpdwFlags
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=GetHandleInformation
[SetHandleInformation]
1=HANDLE hObject
2=[HANDLE_FLAGS] dwMask
3=[HANDLE_FLAGS] dwFlags
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=SetHandleInformation
[SetHandleCount]
1=UINT uNumber
ParamCount=1
@=SetHandleCount
[CreateMailslot]
1=LPCTSTR lpName
2=DWORD nMaxMessageSize
3=DWORD lReadTimeout
4=LPSECURITY_ATTRIBUTES lpSecurityAttributes
ParamCount=4
Header=security.h.api;
@=CreateMailslot
[GetMailslotInfo]
1=HANDLE hMailslot
2=LPDWORD lpMaxMessageSize
3=LPDWORD lpNextSize
4=LPDWORD lpMessageCount
5=LPDWORD lpReadTimeout
ParamCount=5
Header=windows.h.api;
@=GetMailslotInfo
[SetMailslotInfo]
1=HANDLE hMailslot
2=DWORD lReadTimeout
ParamCount=2
Header=windows.h.api;
@=SetMailslotInfo
[AdjustCalendarDate]
1=LPCALDATETIME lpCalDateTime
2=[CALDATETIME_DATEUNIT] calUnit
3=INT amount
ParamCount=3
Header=kernel32.h.api;
@=AdjustCalendarDate
[CompareString]
1=[LCID] Locale
2=[NLS_STRING_COMPARE_FLAGS] dwCmpFlags
3=LPCTSTR lpString1
4=int cchCount1
5=LPCTSTR lpString2
6=int cchCount2
ParamCount=6
Header=kernel32.h.api;windows.h.api;
@=CompareString
[CompareStringEx]
1=LPCWSTR lpLocaleName
2=[NLS_STRING_COMPARE_FLAGS] dwCmpFlags
3=LPCWSTR lpString1
4=int cchCount1
5=LPCWSTR lpString2
6=int cchCount2
7=LPNLSVERSIONINFO lpVersionInformation
8=LPVOID lpReserved
9=LPARAM lParam
ParamCount=9
Header=kernel32.h.api;windows.h.api;
@=CompareStringEx
[CompareStringOrdinal]
1=LPCWSTR lpString1
2=int cchCount1
3=LPCWSTR lpString2
4=int cchCount2
5=BOOL bIgnoreCase
ParamCount=5
@=CompareStringOrdinal
[ConvertCalDateTimeToSystemTime]
1=LPCALDATETIME lpCalDateTime
2=SYSTEMTIME* lpSysTime
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=ConvertCalDateTimeToSystemTime
[ConvertDefaultLocale]
1=[LCID] Locale
ParamCount=1
Header=windows.h.api;
@=ConvertDefaultLocale
[ConvertSystemTimeToCalDateTime]
1=SYSTEMTIME lpSysTime
2=[CALID] calId
3=LPCALDATETIME lpCalDateTime
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=ConvertSystemTimeToCalDateTime
[EnumCalendarInfo]
1=CALINFO_ENUMPROC pCalInfoEnumProc
2=[LCID] Locale
3=[CALID] Calendar
4=[CALTYPE] CalType
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=EnumCalendarInfo
[EnumCalendarInfoEx]
1=CALINFO_ENUMPROCEX pCalInfoEnumProcEx
2=[LCID] Locale
3=[CALID] Calendar
4=[CALTYPE] CalType
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=EnumCalendarInfoEx
[EnumCalendarInfoExEx]
1=CALINFO_ENUMPROCEXEX pCalInfoEnumProcExEx
2=LPCWSTR lpLocaleName
3=[CALID] Calendar
4=LPCWSTR lpReserved
5=[CALTYPE] CalType
6=LPARAM lParam
ParamCount=6
Header=kernel32.h.api;windows.h.api;
@=EnumCalendarInfoExEx
[EnumDateFormats]
1=DATEFMT_ENUMPROC lpDateFmtEnumProc
2=[LCID] Locale
3=[NLS_DATE_FLAGS] dwFlags
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=EnumDateFormats
[EnumDateFormatsEx]
1=DATEFMT_ENUMPROCEX lpDateFmtEnumProcEx
2=[LCID] Locale
3=[NLS_DATE_FLAGS] dwFlags
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=EnumDateFormatsEx
[EnumDateFormatsExEx]
1=DATEFMT_ENUMPROCEXEX lpDateFmtEnumProcExEx
2=LPCWSTR lpLocaleName
3=[NLS_DATE_FLAGS] dwFlags
4=LPARAM lParam
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=EnumDateFormatsExEx
[EnumLanguageGroupLocales]
1=LANGGROUPLOCALE_ENUMPROC lpLangGroupLocaleEnumProc
2=[LGRPID] LanguageGroup
3=DWORD dwFlags
4=LONG_PTR lParam
ParamCount=4
Header=kernel32.h.api;
@=EnumLanguageGroupLocales
[EnumSystemCodePages]
1=CODEPAGE_ENUMPROC lpCodePageEnumProc
2=[CodePageEnumerationFlags] dwFlags
ParamCount=2
Header=kernel32.h.api;
@=EnumSystemCodePages
[EnumSystemGeoID]
1=[GEOCLASS] GeoClass
2=[GEOID] ParentGeoId
3=GEO_ENUMPROC lpGeoEnumProc
ParamCount=3
Header=kernel32.h.api;
@=EnumSystemGeoID
[EnumSystemLanguageGroups]
1=LANGUAGEGROUP_ENUMPROC lpLanguageGroupEnumProc
2=[LANGUAGE_GROUP_FLAGS] dwFlags
3=LONG_PTR lParam
ParamCount=3
Header=kernel32.h.api;
@=EnumSystemLanguageGroups
[EnumSystemLocales]
1=LOCALE_ENUMPROC lpLocaleEnumProc
2=[LocaleEnumerationFlags] dwFlags
ParamCount=2
Header=kernel32.h.api;
@=EnumSystemLocales
[EnumSystemLocalesEx]
1=LOCALE_ENUMPROCEX lpLocaleEnumProcEx
2=[EnumSystemLocalesExFlags] dwFlags
3=LPARAM lParam
4=LPVOID lpReserved
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=EnumSystemLocalesEx
[EnumTimeFormats]
1=TIMEFMT_ENUMPROC lpTimeFmtEnumProc
2=[LCID] Locale
3=[NLS_TIME_FLAGS] dwFlags
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=EnumTimeFormats
[EnumTimeFormatsEx]
1=TIMEFMT_ENUMPROCEX lpTimeFmtEnumProcEx
2=LPCWSTR lpLocaleName
3=[NLS_TIME_FLAGS] dwFlags
4=LPARAM lParam
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=EnumTimeFormatsEx
[FindNLSString]
1=[LCID] Locale
2=[NLS_STRING_FIND_FLAGS] dwFindNLSStringFlags
3=LPCWSTR lpStringSource
4=int cchSource
5=LPCWSTR lpStringValue
6=int cchValue
7=LPINT pcchFound
ParamCount=7
Header=kernel32.h.api;windows.h.api;
@=FindNLSString
[FindNLSStringEx]
1=LPCWSTR lpLocaleName
2=[NLS_STRING_FIND_FLAGS] dwFindNLSStringFlags
3=LPCWSTR lpStringSource
4=int cchSource
5=LPCWSTR lpStringValue
6=int cchValue
7=LPINT pcchFound
8=LPNLSVERSIONINFO lpVersionInformation
9=LPVOID lpReserved
10=LPARAM lParam
ParamCount=10
Header=kernel32.h.api;windows.h.api;
@=FindNLSStringEx
[FindStringOrdinal]
1=[NLS_FIND_FLAGS] dwFindStringOrdinalFlags
2=LPCWSTR lpStringSource
3=int cchSource
4=LPCWSTR lpStringValue
5=int cchValue
6=BOOL bIgnoreCase
ParamCount=6
Header=kernel32.h.api;
@=FindStringOrdinal
[FoldString]
1=[MappingFlags] dwMapFlags
2=LPCTSTR lpSrcStr
3=int cchSrc
4=LPTSTR lpDestStr
5=int cchDest
ParamCount=5
Header=kernel32.h.api;
@=FoldString
[GetACP]
ParamCount=0
@=GetACP
[GetCalendarDateFormatEx]
1=LPCWSTR lpszLocale
2=[NLS_DATE_FLAGS] dwFlags
3=LPCALDATETIME lpCalDateTime
4=LPCWSTR lpFormat
5=LPWSTR lpDateStr
6=int cchDate
ParamCount=6
Header=kernel32.h.api;
@=GetCalendarDateFormatEx
[GetCalendarInfo]
1=[LCID] Locale
2=[CALID] Calendar
3=[CALTYPE] CalType
4=LPTSTR lpCalData
5=int cchData
6=LPDWORD lpValue
ParamCount=6
Header=kernel32.h.api;windows.h.api;
@=GetCalendarInfo
[GetCalendarInfoEx]
1=LPCWSTR lpLocaleName
2=[CALID] Calendar
3=LPCWSTR lpReserved
4=[CALTYPE] CalType
5=LPWSTR lpCalData
6=int cchData
7=LPDWORD lpValue
ParamCount=7
Header=kernel32.h.api;
@=GetCalendarInfoEx
[GetCalendarSupportedDateRange]
1=[CALID] Calendar
2=LPCALDATETIME lpCalMinDateTime
3=LPCALDATETIME lpCalMaxDateTime
ParamCount=3
Header=kernel32.h.api;
@=GetCalendarSupportedDateRange
[GetCPInfo]
1=[CodePageEnum] CodePage
2=LPCPINFO lpCPInfo
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=GetCPInfo
[GetCPInfoEx]
1=[CodePageEnum] CodePage
2=DWORD dwFlags
3=LPCPINFOEX lpCPInfoEx
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=GetCPInfoEx
[GetCurrencyFormat]
1=[LCID] Locale
2=[LOCALE_NOUSEROVERRIDE_FLAG] dwFlags
3=LPCTSTR lpValue
4=CURRENCYFMT* lpFormat
5=LPTSTR lpCurrencyStr
6=int cchCurrency
ParamCount=6
Header=kernel32.h.api;windows.h.api;
@=GetCurrencyFormat
[GetCurrencyFormatEx]
1=LPCWSTR lpLocaleName
2=[LOCALE_NOUSEROVERRIDE_FLAG] dwFlags
3=LPCWSTR lpValue
4=CURRENCYFMT* lpFormat
5=LPWSTR lpCurrencyStr
6=int cchCurrency
ParamCount=6
Header=kernel32.h.api;
@=GetCurrencyFormatEx
[GetDateFormat]
1=[LCID] Locale
2=[NLS_DATE_FLAGS] dwFlags
3=SYSTEMTIME* lpDate
4=LPCTSTR lpFormat
5=LPTSTR lpDateStr
6=int cchDate
ParamCount=6
Header=kernel32.h.api;windows.h.api;
@=GetDateFormat
[GetDateFormatEx]
1=LPCWSTR lpLocaleName
2=[NLS_DATE_FLAGS] dwFlags
3=SYSTEMTIME* lpDate
4=LPCWSTR lpFormat
5=LPWSTR lpDateStr
6=int cchDate
7=LPCWSTR lpCalendar
ParamCount=7
Header=kernel32.h.api;windows.h.api;
@=GetDateFormatEx
[GetDurationFormat]
1=[LCID] Locale
2=[LOCALE_NOUSEROVERRIDE_FLAG] dwFlags
3=SYSTEMTIME* lpDuration
4=ULONGLONG ullDuration
5=LPCWSTR lpFormat
6=LPWSTR lpDurationStr
7=int cchDuration
ParamCount=7
Header=kernel32.h.api;windows.h.api;
@=GetDurationFormat
[GetDurationFormatEx]
1=LPCWSTR lpLocaleName
2=[LOCALE_NOUSEROVERRIDE_FLAG] dwFlags
3=SYSTEMTIME* lpDuration
4=ULONGLONG ullDuration
5=LPCWSTR lpFormat
6=LPWSTR lpDurationStr
7=int cchDuration
ParamCount=7
Header=kernel32.h.api;windows.h.api;
@=GetDurationFormatEx
[GetGeoInfo]
1=[GEOID] Location
2=[GEOTYPE] GeoType
3=LPTSTR lpGeoData
4=int cchData
5=[LANGID] LangId
ParamCount=5
Header=kernel32.h.api;windows.h.api;
@=GetGeoInfo
[GetLocaleInfo]
1=[LCID] Locale
2=[LCTYPE] LCType
3=LPTSTR lpLCData
4=int cchData
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=GetLocaleInfo
[GetLocaleInfoEx]
1=LPCWSTR lpLocaleName
2=[LCTYPE] LCType
3=LPWSTR lpLCData
4=int cchData
ParamCount=4
Header=kernel32.h.api;
@=GetLocaleInfoEx
[GetNLSVersion]
1=[NLS_FUNCTION] Function
2=[LCID] Locale
3=LPNLSVERSIONINFO lpVersionInformation
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=GetNLSVersion
[GetNLSVersionEx]
1=[NLS_FUNCTION] function
2=LPCWSTR lpLocaleName
3=LPNLSVERSIONINFOEX lpVersionInformation
ParamCount=3
Header=kernel32.h.api;
@=GetNLSVersionEx
[GetNumberFormat]
1=[LCID] Locale
2=[LOCALE_NOUSEROVERRIDE_FLAG] dwFlags
3=LPCTSTR lpValue
4=NUMBERFMT* lpFormat
5=LPTSTR lpNumberStr
6=int cchNumber
ParamCount=6
Header=kernel32.h.api;windows.h.api;
@=GetNumberFormat
[GetNumberFormatEx]
1=LPCWSTR lpLocaleName
2=[LOCALE_NOUSEROVERRIDE_FLAG] dwFlags
3=LPCWSTR lpValue
4=NUMBERFMT* lpFormat
5=LPWSTR lpNumberStr
6=int cchNumber
ParamCount=6
Header=kernel32.h.api;windows.h.api;
@=GetNumberFormatEx
[GetOEMCP]
ParamCount=0
@=GetOEMCP
[GetStringScripts]
1=[GET_STRING_SCRIPTS_FLAGS] dwFlags
2=LPCWSTR lpString
3=int cchString
4=LPWSTR lpScripts
5=int cchScripts
ParamCount=5
Header=kernel32.h.api;
@=GetStringScripts
[GetStringTypeA]
1=[LCID] Locale
2=[CharacterTypeFlag] dwInfoType
3=LPCSTR lpSrcStr
4=int cchSrc
5=LPWORD lpCharType
ParamCount=5
Header=kernel32.h.api;windows.h.api;
@=GetStringTypeA
[GetStringTypeEx]
1=[LCID] Locale
2=[CharacterTypeFlag] dwInfoType
3=LPCTSTR lpSrcStr
4=int cchSrc
5=LPWORD lpCharType
ParamCount=5
Header=kernel32.h.api;windows.h.api;
@=GetStringTypeEx
[GetStringTypeW]
1=[CharacterTypeFlag] dwInfoType
2=LPCWSTR lpSrcStr
3=int cchSrc
4=LPWORD lpCharType
ParamCount=4
Header=kernel32.h.api;
@=GetStringTypeW
[GetSystemDefaultLangID]
ParamCount=0
@=GetSystemDefaultLangID
[GetSystemDefaultLCID]
ParamCount=0
@=GetSystemDefaultLCID
[GetSystemDefaultLocaleName]
1=LPWSTR lpLocaleName
2=int cchLocaleName
ParamCount=2
@=GetSystemDefaultLocaleName
[GetThreadLocale]
ParamCount=0
@=GetThreadLocale
[GetTimeFormat]
1=[LCID] Locale
2=[NLS_TIME_FLAGS] dwFlags
3=SYSTEMTIME* lpTime
4=LPCTSTR lpFormat
5=LPTSTR lpTimeStr
6=int cchTime
ParamCount=6
Header=kernel32.h.api;windows.h.api;
@=GetTimeFormat
[GetTimeFormatEx]
1=LPCWSTR lpLocaleName
2=[NLS_TIME_FLAGS] dwFlags
3=SYSTEMTIME* lpTime
4=LPCWSTR lpFormat
5=LPWSTR lpTimeStr
6=int cchTime
ParamCount=6
Header=kernel32.h.api;windows.h.api;
@=GetTimeFormatEx
[GetUserDefaultLangID]
ParamCount=0
@=GetUserDefaultLangID
[GetUserDefaultLCID]
ParamCount=0
@=GetUserDefaultLCID
[GetUserDefaultLocaleName]
1=LPWSTR lpLocaleName
2=int cchLocaleName
ParamCount=2
@=GetUserDefaultLocaleName
[GetUserGeoID]
1=[GEOCLASS] GeoClass
ParamCount=1
Header=kernel32.h.api;
@=GetUserGeoID
[IsCalendarLeapYear]
1=[CALID] calId
2=UINT year
3=UINT era
ParamCount=3
Header=kernel32.h.api;
@=IsCalendarLeapYear
[IsNLSDefinedString]
1=[NLS_FUNCTION] Function
2=DWORD dwFlags
3=LPNLSVERSIONINFO lpVersionInformation
4=LPCWSTR lpString
5=INT cchStr
ParamCount=5
Header=kernel32.h.api;
@=IsNLSDefinedString
[IsValidCodePage]
1=[CodePageEnum] CodePage
ParamCount=1
Header=windows.h.api;
@=IsValidCodePage
[IsValidLanguageGroup]
1=[LGRPID] LanguageGroup
2=[LANGUAGE_GROUP_FLAGS] dwFlags
ParamCount=2
Header=kernel32.h.api;
@=IsValidLanguageGroup
[IsValidLocale]
1=[LCID] Locale
2=[LocaleEnumerationFlags] dwFlags
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=IsValidLocale
[IsValidLocaleName]
1=LPCWSTR lpLocaleName
ParamCount=1
@=IsValidLocaleName
[IsValidNLSVersion]
1=[NLS_FUNCTION] function
2=LPCWSTR lpLocaleName
3=LPNLSVERSIONINFOEX lpVersionInformation
ParamCount=3
Header=kernel32.h.api;
@=IsValidNLSVersion
[LCIDToLocaleName]
1=[LCID] Locale
2=LPWSTR lpName
3=int cchName
4=[LOCALE_NAME_FLAGS] dwFlags
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=LCIDToLocaleName
[LCMapString]
1=[LCID] Locale
2=[LocaleMappingFlags] dwMapFlags
3=LPCTSTR lpSrcStr
4=int cchSrc
5=LPTSTR lpDestStr
6=int cchDest
ParamCount=6
Header=windows.h.api;
@=LCMapString
[LCMapStringEx]
1=LPCWSTR lpLocaleName
2=[LocaleMappingFlags] dwMapFlags
3=LPCWSTR lpSrcStr
4=int cchSrc
5=LPWSTR lpDestStr
6=int cchDest
7=LPNLSVERSIONINFO lpVersionInformation
8=LPVOID lpReserved
9=LPARAM lParam
ParamCount=9
Header=kernel32.h.api;windows.h.api;
@=LCMapStringEx
[LoadStringByReference]
1=[LoadStringByReference_Flags] Flags
2=PCWSTR Language
3=PCWSTR SourceString
4=PWSTR Buffer
5=ULONG cchBuffer
6=PCWSTR Directory
7=PULONG pcchBufferOut
ParamCount=7
Header=kernel32.h.api;
@=LoadStringByReference
[LocaleNameToLCID]
1=LPCWSTR lpName
2=[LOCALE_NAME_FLAGS] dwFlags
ParamCount=2
Header=kernel32.h.api;
@=LocaleNameToLCID
[NotifyUILanguageChange]
1=DWORD dwFlags
2=PCWSTR pcwstrNewLanguage
3=PCWSTR pcwstrPreviousLanguage
4=DWORD dwReserved
5=PDWORD pdwStatusRtrn
ParamCount=5
@=NotifyUILanguageChange
[ResolveLocaleName]
1=LPCWSTR lpNameToResolve
2=LPWSTR lpLocaleName
3=int cchLocaleName
ParamCount=3
@=ResolveLocaleName
[SetCalendarInfo]
1=[LCID] Locale
2=[CALID] Calendar
3=[CALTYPE] CalType
4=LPCTSTR lpCalData
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=SetCalendarInfo
[SetLocaleInfo]
1=[LCID] Locale
2=[LCTYPE] LCType
3=LPCTSTR lpLCData
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=SetLocaleInfo
[SetThreadLocale]
1=[LCID] Locale
ParamCount=1
Header=windows.h.api;
@=SetThreadLocale
[SetUserGeoID]
1=[GEOID] GeoId
ParamCount=1
Header=kernel32.h.api;
@=SetUserGeoID
[UpdateCalendarDayOfWeek]
1=LPCALDATETIME lpCalDateTime
ParamCount=1
Header=kernel32.h.api;
@=UpdateCalendarDayOfWeek
[VerifyScripts]
1=[VERIFY_SCRIPTS_FLAGS] dwFlags
2=LPCWSTR lpLocaleScripts
3=int cchLocaleScripts
4=LPCWSTR lpTestScripts
5=int cchTestScripts
ParamCount=5
Header=kernel32.h.api;
@=VerifyScripts
[GetDevicePowerState]
1=HANDLE hDevice
2=BOOL* pfOn
ParamCount=2
Header=windows.h.api;
@=GetDevicePowerState
[GetSystemPowerStatus]
1=LPSYSTEM_POWER_STATUS lpSystemPowerStatus
ParamCount=1
Header=kernel32.h.api;
@=GetSystemPowerStatus
[IsSystemResumeAutomatic]
ParamCount=0
@=IsSystemResumeAutomatic
[PowerClearRequest]
1=HANDLE PowerRequest
2=[POWER_REQUEST_TYPE] RequestType
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=PowerClearRequest
[PowerCreateRequest]
1=PREASON_CONTEXT Context
ParamCount=1
Header=kernel32.h.api;
@=PowerCreateRequest
[PowerSetRequest]
1=HANDLE PowerRequest
2=[POWER_REQUEST_TYPE] RequestType
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=PowerSetRequest
[QueryUnbiasedInterruptTime]
1=PULONGLONG UnbiasedTime
ParamCount=1
@=QueryUnbiasedInterruptTime
[SetThreadExecutionState]
1=[EXECUTION_STATE] esFlags
ParamCount=1
Header=kernel32.h.api;
@=SetThreadExecutionState
[RequestWakeupLatency]
1=[LATENCY_TIME] latency
ParamCount=1
Header=kernel32.h.api;
@=RequestWakeupLatency
[SetSystemPowerState]
1=BOOL fSuspend
2=BOOL fForce
ParamCount=2
@=SetSystemPowerState
[BeginUpdateResource]
1=LPCTSTR pFileName
2=BOOL bDeleteExistingResources
ParamCount=2
@=BeginUpdateResource
[EndUpdateResource]
1=HANDLE hUpdate
2=BOOL fDiscard
ParamCount=2
Header=windows.h.api;
@=EndUpdateResource
[EnumResourceLanguages]
1=HMODULE hModule
2=LPCTSTR lpType
3=LPCTSTR lpName
4=ENUMRESLANGPROC lpEnumFunc
5=LONG_PTR lParam
ParamCount=5
Header=kernel32.h.api;
@=EnumResourceLanguages
[EnumResourceLanguagesEx]
1=HMODULE hModule
2=LPCTSTR lpType
3=LPCTSTR lpName
4=ENUMRESLANGPROC lpEnumFunc
5=LONG_PTR lParam
6=[RESOURCE_ENUM_FLAGS] dwFlags
7=[LANGID] LangId
ParamCount=7
Header=kernel32.h.api;windows.h.api;
@=EnumResourceLanguagesEx
[EnumResourceNames]
1=HMODULE hModule
2=LPCTSTR lpszType
3=ENUMRESNAMEPROC lpEnumFunc
4=LONG_PTR lParam
ParamCount=4
Header=kernel32.h.api;
@=EnumResourceNames
[EnumResourceNamesEx]
1=HMODULE hModule
2=LPCTSTR lpszType
3=ENUMRESNAMEPROC lpEnumFunc
4=LONG_PTR lParam
5=[RESOURCE_ENUM_FLAGS] dwFlags
6=[LANGID] LangId
ParamCount=6
Header=kernel32.h.api;windows.h.api;
@=EnumResourceNamesEx
[EnumResourceTypes]
1=HMODULE hModule
2=ENUMRESTYPEPROC lpEnumFunc
3=LONG_PTR lParam
ParamCount=3
Header=kernel32.h.api;
@=EnumResourceTypes
[EnumResourceTypesEx]
1=HMODULE hModule
2=ENUMRESTYPEPROC lpEnumFunc
3=LONG_PTR lParam
4=[RESOURCE_ENUM_FLAGS] dwFlags
5=[LANGID] LangId
ParamCount=5
Header=kernel32.h.api;windows.h.api;
@=EnumResourceTypesEx
[FindResource]
1=HMODULE hModule
2=LPCTSTR lpName
3=LPCTSTR lpType
ParamCount=3
@=FindResource
[FindResourceEx]
1=HMODULE hModule
2=LPCTSTR lpType
3=LPCTSTR lpName
4=WORD wLanguage
ParamCount=4
@=FindResourceEx
[FreeResource]
1=HGLOBAL hglbResource
ParamCount=1
Header=windows.h.api;
@=FreeResource
[LoadResource]
1=HMODULE hModule
2=HRSRC hResInfo
ParamCount=2
Header=windows.h.api;
@=LoadResource
[LockResource]
1=HGLOBAL hResData
ParamCount=1
Header=windows.h.api;
@=LockResource
[SizeofResource]
1=HMODULE hModule
2=HRSRC hResInfo
ParamCount=2
Header=windows.h.api;
@=SizeofResource
[UpdateResource]
1=HANDLE hUpdate
2=LPCTSTR lpType
3=LPCTSTR lpName
4=WORD wLanguage
5=LPVOID lpData
6=DWORD cbData
ParamCount=6
Header=windows.h.api;
@=UpdateResource
[lstrcat]
1=LPSTR lpString1
2=LPSTR lpString2
ParamCount=2
@=lstrcat
[lstrcmp]
1=LPCSTR lpString1
2=LPCSTR lpString2
ParamCount=2
@=lstrcmp
[lstrcmpi]
1=LPCSTR lpString1
2=LPCSTR lpString2
ParamCount=2
@=lstrcmpi
[lstrcpy]
1=LPSTR lpString1
2=LPSTR lpString2
ParamCount=2
@=lstrcpy
[lstrcpyn]
1=LPSTR lpString1
2=LPCSTR lpString2
3=int iMaxLength
ParamCount=3
@=lstrcpyn
[lstrlen]
1=LPCSTR lpString
ParamCount=1
@=lstrlen
[RaiseException]
1=DWORD dwExceptionCode
2=DWORD dwExceptionFlags
3=DWORD nNumberOfArguments
4=ULONG_PTR *lpArguments
ParamCount=4
@=RaiseException
[AddVectoredContinueHandler]
1=ULONG FirstHandler
2=PVECTORED_EXCEPTION_HANDLER VectoredHandler
ParamCount=2
Header=windows.h.api;
@=AddVectoredContinueHandler
[AddVectoredExceptionHandler]
1=ULONG FirstHandler
2=PVECTORED_EXCEPTION_HANDLER VectoredHandler
ParamCount=2
Header=windows.h.api;
@=AddVectoredExceptionHandler
[RemoveVectoredContinueHandler]
1=PVOID Handler
ParamCount=1
@=RemoveVectoredContinueHandler
[RemoveVectoredExceptionHandler]
1=PVOID Handler
ParamCount=1
@=RemoveVectoredExceptionHandler
[SetUnhandledExceptionFilter]
1=LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
ParamCount=1
Header=kernel32.h.api;
@=SetUnhandledExceptionFilter
[UnhandledExceptionFilter]
1=EXCEPTION_POINTERS* ExceptionInfo
ParamCount=1
Header=windows.h.api;
@=UnhandledExceptionFilter
[RtlAddFunctionTable]
1=PRUNTIME_FUNCTION FunctionTable
2=DWORD EntryCount
3=DWORD64 BaseAddress
ParamCount=3
Header=kernel32.h.api;
@=RtlAddFunctionTable
[RtlCaptureContext]
1=PCONTEXT ContextRecord
ParamCount=1
Header=windows.h.api;
@=RtlCaptureContext
[RtlDeleteFunctionTable]
1=PRUNTIME_FUNCTION FunctionTable
ParamCount=1
Header=kernel32.h.api;
@=RtlDeleteFunctionTable
[RtlInstallFunctionTableCallback]
1=DWORD64 TableIdentifier
2=DWORD64 BaseAddress
3=DWORD Length
4=PGET_RUNTIME_FUNCTION_CALLBACK Callback
5=PVOID Context
6=PCWSTR OutOfProcessCallbackDll
ParamCount=6
Header=kernel32.h.api;
@=RtlInstallFunctionTableCallback
[RtlRestoreContext]
1=PCONTEXT ContextRecord
2=PEXCEPTION_RECORD ExceptionRecord
ParamCount=2
Header=windows.h.api;
@=RtlRestoreContext
[GetOverlappedResult]
1=HANDLE hFile
2=LPOVERLAPPED lpOverlapped
3=LPDWORD lpNumberOfBytesTransferred
4=BOOL bWait
ParamCount=4
Header=windows.h.api;
@=GetOverlappedResult
[GetOverlappedResultEx]
1=HANDLE hFile
2=LPOVERLAPPED lpOverlapped
3=LPDWORD lpNumberOfBytesTransferred
4=DWORD dwMilliseconds
5=BOOL bAlertable
ParamCount=5
Header=windows.h.api;
@=GetOverlappedResultEx
[QueueUserAPC]
1=PAPCFUNC pfnAPC
2=[ThreadHandle] hThread
3=ULONG_PTR dwData
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=QueueUserAPC
[AcquireSRWLockExclusive]
1=PSRWLOCK SRWLock
ParamCount=1
Header=kernel32.h.api;
@=AcquireSRWLockExclusive
[AcquireSRWLockShared]
1=PSRWLOCK SRWLock
ParamCount=1
Header=kernel32.h.api;
@=AcquireSRWLockShared
[InitializeConditionVariable]
1=PCONDITION_VARIABLE ConditionVariable
ParamCount=1
Header=kernel32.h.api;
@=InitializeConditionVariable
[InitializeSRWLock]
1=PSRWLOCK SRWLock
ParamCount=1
Header=kernel32.h.api;
@=InitializeSRWLock
[ReleaseSRWLockExclusive]
1=PSRWLOCK SRWLock
ParamCount=1
Header=kernel32.h.api;
@=ReleaseSRWLockExclusive
[ReleaseSRWLockShared]
1=PSRWLOCK SRWLock
ParamCount=1
Header=kernel32.h.api;
@=ReleaseSRWLockShared
[SleepConditionVariableCS]
1=PCONDITION_VARIABLE ConditionVariable
2=PCRITICAL_SECTION CriticalSection
3=[WaitTimeout] dwMilliseconds
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=SleepConditionVariableCS
[SleepConditionVariableSRW]
1=PCONDITION_VARIABLE ConditionVariable
2=PSRWLOCK SRWLock
3=[WaitTimeout] dwMilliseconds
4=[CONDITION_VARIABLE_FLAGS] Flags
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=SleepConditionVariableSRW
[TryAcquireSRWLockExclusive]
1=PSRWLOCK SRWLock
ParamCount=1
Header=kernel32.h.api;
@=TryAcquireSRWLockExclusive
[TryAcquireSRWLockShared]
1=PSRWLOCK SRWLock
ParamCount=1
Header=kernel32.h.api;
@=TryAcquireSRWLockShared
[WakeAllConditionVariable]
1=PCONDITION_VARIABLE ConditionVariable
ParamCount=1
Header=kernel32.h.api;
@=WakeAllConditionVariable
[WakeConditionVariable]
1=PCONDITION_VARIABLE ConditionVariable
ParamCount=1
Header=kernel32.h.api;
@=WakeConditionVariable
[DeleteCriticalSection]
1=LPCRITICAL_SECTION lpCriticalSection
ParamCount=1
Header=kernel32.h.api;
@=DeleteCriticalSection
[EnterCriticalSection]
1=LPCRITICAL_SECTION lpCriticalSection
ParamCount=1
Header=kernel32.h.api;
@=EnterCriticalSection
[InitializeCriticalSection]
1=LPCRITICAL_SECTION lpCriticalSection
ParamCount=1
Header=kernel32.h.api;
@=InitializeCriticalSection
[InitializeCriticalSectionAndSpinCount]
1=LPCRITICAL_SECTION lpCriticalSection
2=DWORD dwSpinCount
ParamCount=2
Header=kernel32.h.api;
@=InitializeCriticalSectionAndSpinCount
[InitializeCriticalSectionEx]
1=LPCRITICAL_SECTION lpCriticalSection
2=DWORD dwSpinCount
3=[CRITICAL_SECTION_FLAGS] Flags
ParamCount=3
Header=kernel32.h.api;
@=InitializeCriticalSectionEx
[LeaveCriticalSection]
1=LPCRITICAL_SECTION lpCriticalSection
ParamCount=1
Header=kernel32.h.api;
@=LeaveCriticalSection
[SetCriticalSectionSpinCount]
1=LPCRITICAL_SECTION lpCriticalSection
2=DWORD dwSpinCount
ParamCount=2
Header=kernel32.h.api;
@=SetCriticalSectionSpinCount
[TryEnterCriticalSection]
1=LPCRITICAL_SECTION lpCriticalSection
ParamCount=1
Header=kernel32.h.api;
@=TryEnterCriticalSection
[CreateEvent]
1=LPSECURITY_ATTRIBUTES lpEventAttributes
2=BOOL bManualReset
3=BOOL bInitialState
4=LPCTSTR lpName
ParamCount=4
Header=security.h.api;
@=CreateEvent
[CreateEventEx]
1=LPSECURITY_ATTRIBUTES lpEventAttributes
2=LPCTSTR lpName
3=[CREATE_EVENT_FLAGS] dwFlags
4=[EventAccessRights] dwDesiredAccess
ParamCount=4
Header=kernel32.h.api;security.h.api;
@=CreateEventEx
[OpenEvent]
1=[EventAccessRights] dwDesiredAccess
2=BOOL bInheritHandle
3=LPCTSTR lpName
ParamCount=3
Header=kernel32.h.api;
@=OpenEvent
[PulseEvent]
1=HANDLE hEvent
ParamCount=1
Header=windows.h.api;
@=PulseEvent
[ResetEvent]
1=HANDLE hEvent
ParamCount=1
Header=windows.h.api;
@=ResetEvent
[SetEvent]
1=HANDLE hEvent
ParamCount=1
Header=windows.h.api;
@=SetEvent
[InitOnceBeginInitialize]
1=LPINIT_ONCE lpInitOnce
2=[INIT_ONCE_FLAGS] dwFlags
3=PBOOL fPending
4=LPVOID* lpContext
ParamCount=4
Header=kernel32.h.api;
@=InitOnceBeginInitialize
[InitOnceComplete]
1=LPINIT_ONCE lpInitOnce
2=[INIT_ONCE_FLAGS] dwFlags
3=LPVOID lpContext
ParamCount=3
Header=kernel32.h.api;
@=InitOnceComplete
[InitOnceExecuteOnce]
1=PINIT_ONCE InitOnce
2=PINIT_ONCE_FN InitFn
3=PVOID Parameter
4=LPVOID* Context
ParamCount=4
Header=kernel32.h.api;
@=InitOnceExecuteOnce
[InitOnceInitialize]
1=PINIT_ONCE InitOnce
ParamCount=1
Header=kernel32.h.api;
@=InitOnceInitialize
[InterlockedCompareExchange]
1=LONG volatile* Destination
2=LONG Exchange
3=LONG Comparand
ParamCount=3
@=InterlockedCompareExchange
[InterlockedCompareExchange64]
1=LONGLONG volatile* Destination
2=LONGLONG Exchange
3=LONGLONG Comparand
ParamCount=3
@=InterlockedCompareExchange64
[InterlockedDecrement]
1=LONG volatile* Addend
ParamCount=1
@=InterlockedDecrement
[InterlockedExchange]
1=LONG volatile* Target
2=LONG Value
ParamCount=2
@=InterlockedExchange
[InterlockedExchangeAdd]
1=LONG volatile* Addend
2=LONG Value
ParamCount=2
@=InterlockedExchangeAdd
[InterlockedIncrement]
1=LONG volatile* Addend
ParamCount=1
@=InterlockedIncrement
[CreateMutex]
1=LPSECURITY_ATTRIBUTES lpMutexAttributes
2=BOOL bInitialOwner
3=LPCTSTR lpName
ParamCount=3
Header=security.h.api;
@=CreateMutex
[CreateMutexEx]
1=LPSECURITY_ATTRIBUTES lpMutexAttributes
2=LPCTSTR lpName
3=[CREATE_MUTEX_FLAGS] dwFlags
4=[MutexAccessRights] dwDesiredAccess
ParamCount=4
Header=kernel32.h.api;security.h.api;
@=CreateMutexEx
[OpenMutex]
1=[MutexAccessRights] dwDesiredAccess
2=BOOL bInheritHandle
3=LPCTSTR lpName
ParamCount=3
Header=kernel32.h.api;
@=OpenMutex
[ReleaseMutex]
1=HANDLE hMutex
ParamCount=1
Header=windows.h.api;
@=ReleaseMutex
[AddSIDToBoundaryDescriptor]
1=HANDLE* BoundaryDescriptor
2=PSID RequiredSid
ParamCount=2
Header=windows.h.api;
@=AddSIDToBoundaryDescriptor
[AddIntegrityLabelToBoundaryDescriptor]
1=HANDLE* BoundaryDescriptor
2=PSID IntegrityLabel
ParamCount=2
Header=windows.h.api;
@=AddIntegrityLabelToBoundaryDescriptor
[ClosePrivateNamespace]
1=HANDLE Handle
2=[PrivateNamespaceFlag] Flags
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=ClosePrivateNamespace
[CreateBoundaryDescriptor]
1=LPCTSTR Name
2=ULONG Flags
ParamCount=2
@=CreateBoundaryDescriptor
[CreatePrivateNamespace]
1=LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes
2=LPVOID lpBoundaryDescriptor
3=LPCTSTR lpAliasPrefix
ParamCount=3
Header=security.h.api;
@=CreatePrivateNamespace
[DeleteBoundaryDescriptor]
1=HANDLE BoundaryDescriptor
ParamCount=1
Header=windows.h.api;
@=DeleteBoundaryDescriptor
[OpenPrivateNamespace]
1=LPVOID lpBoundaryDescriptor
2=LPCTSTR lpAliasPrefix
ParamCount=2
@=OpenPrivateNamespace
[CreateSemaphore]
1=LPSECURITY_ATTRIBUTES lpSemaphoreAttributes
2=LONG lInitialCount
3=LONG lMaximumCount
4=LPCTSTR lpName
ParamCount=4
Header=security.h.api;
@=CreateSemaphore
[CreateSemaphoreEx]
1=LPSECURITY_ATTRIBUTES lpSemaphoreAttributes
2=LONG lInitialCount
3=LONG lMaximumCount
4=LPCTSTR lpName
5=DWORD dwFlags
6=[SemaphoreAccessRights] dwDesiredAccess
ParamCount=6
Header=kernel32.h.api;security.h.api;
@=CreateSemaphoreEx
[OpenSemaphore]
1=[SemaphoreAccessRights] dwDesiredAccess
2=BOOL bInheritHandle
3=LPCTSTR lpName
ParamCount=3
Header=kernel32.h.api;
@=OpenSemaphore
[ReleaseSemaphore]
1=HANDLE hSemaphore
2=LONG lReleaseCount
3=LPLONG lpPreviousCount
ParamCount=3
Header=windows.h.api;
@=ReleaseSemaphore
[InitializeSListHead]
1=PSLIST_HEADER ListHead
ParamCount=1
Header=windows.h.api;
@=InitializeSListHead
[InterlockedFlushSList]
1=PSLIST_HEADER ListHead
ParamCount=1
Header=windows.h.api;
@=InterlockedFlushSList
[InterlockedPopEntrySList]
1=PSLIST_HEADER ListHead
ParamCount=1
Header=windows.h.api;
@=InterlockedPopEntrySList
[InterlockedPushEntrySList]
1=PSLIST_HEADER ListHead
2=PSLIST_ENTRY ListEntry
ParamCount=2
Header=windows.h.api;
@=InterlockedPushEntrySList
[InterlockedPushListSList]
1=PSLIST_HEADER ListHead
2=PSLIST_ENTRY List
3=PSLIST_ENTRY ListEnd
4=ULONG Count
ParamCount=4
Header=windows.h.api;
@=InterlockedPushListSList
[InterlockedPushListSListEx]
1=PSLIST_HEADER ListHead
2=PSLIST_ENTRY List
3=PSLIST_ENTRY ListEnd
4=ULONG Count
ParamCount=4
Header=windows.h.api;
@=InterlockedPushListSListEx
[QueryDepthSList]
1=PSLIST_HEADER ListHead
ParamCount=1
Header=windows.h.api;
@=QueryDepthSList
[DeleteSynchronizationBarrier]
1=LPSYNCHRONIZATION_BARRIER lpBarrier
ParamCount=1
Header=kernel32.h.api;
@=DeleteSynchronizationBarrier
[EnterSynchronizationBarrier]
1=LPSYNCHRONIZATION_BARRIER lpBarrier
2=[SYNCHRONIZATION_BARRIER_FLAGS] dwFlags
ParamCount=2
Header=kernel32.h.api;
@=EnterSynchronizationBarrier
[InitializeSynchronizationBarrier]
1=LPSYNCHRONIZATION_BARRIER lpBarrier
2=LONG lTotalThreads
3=LONG lSpinCount
ParamCount=3
Header=kernel32.h.api;
@=InitializeSynchronizationBarrier
[ChangeTimerQueueTimer]
1=HANDLE TimerQueue
2=HANDLE Timer
3=ULONG DueTime
4=ULONG Period
ParamCount=4
Header=windows.h.api;
@=ChangeTimerQueueTimer
[CreateTimerQueue]
ParamCount=0
@=CreateTimerQueue
[CreateTimerQueueTimer]
1=PHANDLE phNewTimer
2=HANDLE TimerQueue
3=WAITORTIMERCALLBACK Callback
4=PVOID Parameter
5=DWORD DueTime
6=DWORD Period
7=[WorkItemFlags] Flags
ParamCount=7
Header=kernel32.h.api;windows.h.api;
@=CreateTimerQueueTimer
[DeleteTimerQueue]
1=HANDLE TimerQueue
ParamCount=1
Header=windows.h.api;
@=DeleteTimerQueue
[DeleteTimerQueueEx]
1=HANDLE TimerQueue
2=HANDLE CompletionEvent
ParamCount=2
Header=windows.h.api;
@=DeleteTimerQueueEx
[DeleteTimerQueueTimer]
1=HANDLE TimerQueue
2=HANDLE Timer
3=HANDLE CompletionEvent
ParamCount=3
Header=windows.h.api;
@=DeleteTimerQueueTimer
[RegisterWaitForSingleObject]
1=PHANDLE phNewWaitObject
2=HANDLE hObject
3=WAITORTIMERCALLBACK Callback
4=PVOID Context
5=[WaitTimeout] dwMilliseconds
6=[WorkItemFlags] dwFlags
ParamCount=6
Header=kernel32.h.api;windows.h.api;
@=RegisterWaitForSingleObject
[SignalObjectAndWait]
1=HANDLE hObjectToSignal
2=HANDLE hObjectToWaitOn
3=[WaitTimeout] dwMilliseconds
4=BOOL bAlertable
ParamCount=4
Header=windows.h.api;
@=SignalObjectAndWait
[UnregisterWait]
1=HANDLE WaitHandle
ParamCount=1
Header=windows.h.api;
@=UnregisterWait
[UnregisterWaitEx]
1=HANDLE WaitHandle
2=HANDLE CompletionEvent
ParamCount=2
Header=windows.h.api;
@=UnregisterWaitEx
[WaitForMultipleObjects]
1=DWORD nCount
2=HANDLE* lpHandles
3=BOOL bWaitAll
4=[WaitTimeout] dwMilliseconds
ParamCount=4
Header=windows.h.api;
@=WaitForMultipleObjects
[WaitForMultipleObjectsEx]
1=DWORD nCount
2=HANDLE* lpHandles
3=BOOL bWaitAll
4=[WaitTimeout] dwMilliseconds
5=BOOL bAlertable
ParamCount=5
Header=windows.h.api;
@=WaitForMultipleObjectsEx
[WaitForSingleObject]
1=HANDLE hHandle
2=[WaitTimeout] dwMilliseconds
ParamCount=2
Header=windows.h.api;
@=WaitForSingleObject
[WaitForSingleObjectEx]
1=HANDLE hHandle
2=[WaitTimeout] dwMilliseconds
3=BOOL bAlertable
ParamCount=3
Header=windows.h.api;
@=WaitForSingleObjectEx
[WaitOnAddress]
1=VOID volatile* Address
2=PVOID CompareAddress
3=SIZE_T AddressSize
4=DWORD dwMilliseconds
ParamCount=4
Header=kernel32.h.api;
@=WaitOnAddress
[WakeByAddressAll]
1=PVOID Address
ParamCount=1
@=WakeByAddressAll
[WakeByAddressSingle]
1=PVOID Address
ParamCount=1
@=WakeByAddressSingle
[CancelWaitableTimer]
1=HANDLE hTimer
ParamCount=1
Header=windows.h.api;
@=CancelWaitableTimer
[CreateWaitableTimer]
1=LPSECURITY_ATTRIBUTES lpTimerAttributes
2=BOOL bManualReset
3=LPCTSTR lpTimerName
ParamCount=3
Header=security.h.api;
@=CreateWaitableTimer
[CreateWaitableTimerEx]
1=LPSECURITY_ATTRIBUTES lpTimerAttributes
2=LPCTSTR lpTimerName
3=[CREATE_WAITABLE_TIMER_FLAGS] dwFlags
4=[TimerAccessRights] dwDesiredAccess
ParamCount=4
Header=kernel32.h.api;security.h.api;
@=CreateWaitableTimerEx
[OpenWaitableTimer]
1=[TimerAccessRights] dwDesiredAccess
2=BOOL bInheritHandle
3=LPCTSTR lpTimerName
ParamCount=3
Header=kernel32.h.api;
@=OpenWaitableTimer
[SetWaitableTimer]
1=HANDLE hTimer
2=LARGE_INTEGER* pDueTime
3=LONG lPeriod
4=PTIMERAPCROUTINE pfnCompletionRoutine
5=LPVOID lpArgToCompletionRoutine
6=BOOL fResume
ParamCount=6
Header=kernel32.h.api;windows.h.api;
@=SetWaitableTimer
[SetWaitableTimerEx]
1=HANDLE hTimer
2=LARGE_INTEGER* lpDueTime
3=LONG lPeriod
4=PTIMERAPCROUTINE pfnCompletionRoutine
5=LPVOID lpArgToCompletionRoutine
6=PREASON_CONTEXT WakeContext
7=ULONG TolerableDelay
ParamCount=7
Header=kernel32.h.api;windows.h.api;
@=SetWaitableTimerEx
[DnsHostnameToComputerName]
1=LPCTSTR Hostname
2=LPTSTR ComputerName
3=LPDWORD nSize
ParamCount=3
@=DnsHostnameToComputerName
[EnumSystemFirmwareTables]
1=DWORD FirmwareTableProviderSignature
2=PVOID pFirmwareTableBuffer
3=DWORD BufferSize
ParamCount=3
@=EnumSystemFirmwareTables
[ExpandEnvironmentStrings]
1=LPCTSTR lpSrc
2=LPTSTR lpDst
3=DWORD nSize
ParamCount=3
@=ExpandEnvironmentStrings
[GetComputerName]
1=LPTSTR lpBuffer
2=LPDWORD lpnSize
ParamCount=2
@=GetComputerName
[GetComputerNameEx]
1=[COMPUTER_NAME_FORMAT] NameType
2=LPTSTR lpBuffer
3=LPDWORD lpnSize
ParamCount=3
Header=kernel32.h.api;
@=GetComputerNameEx
[GetFirmwareEnvironmentVariable]
1=LPCTSTR lpName
2=LPCTSTR lpGuid
3=PVOID pBuffer
4=DWORD nSize
ParamCount=4
@=GetFirmwareEnvironmentVariable
[GetFirmwareEnvironmentVariableEx]
1=LPCTSTR lpName
2=LPCTSTR lpGuid
3=PVOID pBuffer
4=DWORD nSize
5=PDWORD pdwAttribubutes
ParamCount=5
@=GetFirmwareEnvironmentVariableEx
[GetFirmwareType]
1=PFIRMWARE_TYPE FirmwareType
ParamCount=1
Header=kernel32.h.api;
@=GetFirmwareType
[GetNativeSystemInfo]
1=LPSYSTEM_INFO lpSystemInfo
ParamCount=1
Header=kernel32.h.api;
@=GetNativeSystemInfo
[GetProductInfo]
1=DWORD dwOSMajorVersion
2=DWORD dwOSMinorVersion
3=DWORD dwSpMajorVersion
4=DWORD dwSpMinorVersion
5=[ProductType*] pdwReturnedProductType
ParamCount=5
Header=kernel32.h.api;
@=GetProductInfo
[GetSystemDirectory]
1=LPTSTR lpBuffer
2=UINT uSize
ParamCount=2
@=GetSystemDirectory
[GetSystemFirmwareTable]
1=DWORD FirmwareTableProviderSignature
2=DWORD FirmwareTableID
3=PVOID pFirmwareTableBuffer
4=DWORD BufferSize
ParamCount=4
@=GetSystemFirmwareTable
[GetSystemInfo]
1=LPSYSTEM_INFO lpSystemInfo
ParamCount=1
Header=kernel32.h.api;
@=GetSystemInfo
[GetSystemRegistryQuota]
1=PDWORD pdwQuotaAllowed
2=PDWORD pdwQuotaUsed
ParamCount=2
@=GetSystemRegistryQuota
[GetSystemWindowsDirectory]
1=LPTSTR lpBuffer
2=UINT uSize
ParamCount=2
@=GetSystemWindowsDirectory
[GetSystemWow64Directory]
1=LPTSTR lpBuffer
2=UINT uSize
ParamCount=2
@=GetSystemWow64Directory
[GetVersion]
ParamCount=0
@=GetVersion
[GetVersionEx]
1=LPOSVERSIONINFO lpVersionInfo
ParamCount=1
Header=windows.h.api;
@=GetVersionEx
[GetWindowsDirectory]
1=LPTSTR lpBuffer
2=UINT uSize
ParamCount=2
@=GetWindowsDirectory
[IsProcessorFeaturePresent]
1=[ProcessorFeatureEnum] ProcessorFeature
ParamCount=1
Header=kernel32.h.api;
@=IsProcessorFeaturePresent
[SetComputerName]
1=LPCTSTR lpComputerName
ParamCount=1
@=SetComputerName
[SetComputerNameEx]
1=[COMPUTER_NAME_FORMAT] NameType
2=LPCTSTR lpBuffer
ParamCount=2
Header=kernel32.h.api;
@=SetComputerNameEx
[SetFirmwareEnvironmentVariable]
1=LPCTSTR lpName
2=LPCTSTR lpGuid
3=PVOID pBuffer
4=DWORD nSize
ParamCount=4
@=SetFirmwareEnvironmentVariable
[VerifyVersionInfo]
1=LPOSVERSIONINFOEX lpVersionInfo
2=[NtVerType] dwTypeMask
3=DWORDLONG dwlConditionMask
ParamCount=3
Header=native.h.api;windows.h.api;
@=VerifyVersionInfo
[VerSetConditionMask]
1=ULONGLONG dwlConditionMask
2=[NtVerType] dwTypeBitMask
3=[VerOperator] dwConditionMask
ParamCount=3
Header=kernel32.h.api;native.h.api;
@=VerSetConditionMask
[BackupRead]
1=HANDLE hFile
2=LPBYTE lpBuffer
3=DWORD nNumberOfBytesToRead
4=LPDWORD lpNumberOfBytesRead
5=BOOL bAbort
6=BOOL bProcessSecurity
7=LPVOID* lpContext
ParamCount=7
Header=windows.h.api;
@=BackupRead
[BackupSeek]
1=HANDLE hFile
2=DWORD dwLowBytesToSeek
3=DWORD dwHighBytesToSeek
4=LPDWORD lpdwLowByteSeeked
5=LPDWORD lpdwHighByteSeeked
6=LPVOID* lpContext
ParamCount=6
Header=windows.h.api;
@=BackupSeek
[BackupWrite]
1=HANDLE hFile
2=LPBYTE lpBuffer
3=DWORD nNumberOfBytesToWrite
4=LPDWORD lpNumberOfBytesWritten
5=BOOL bAbort
6=BOOL bProcessSecurity
7=LPVOID* lpContext
ParamCount=7
Header=windows.h.api;
@=BackupWrite
[CreateTapePartition]
1=HANDLE hDevice
2=DWORD dwPartitionMethod
3=DWORD dwCount
4=DWORD dwSize
ParamCount=4
Header=windows.h.api;
@=CreateTapePartition
[EraseTape]
1=HANDLE hDevice
2=DWORD dwEraseType
3=BOOL bImmediate
ParamCount=3
Header=windows.h.api;
@=EraseTape
[GetTapeParameters]
1=HANDLE hDevice
2=DWORD dwOperation
3=LPDWORD lpdwSize
4=LPVOID lpTapeInformation
ParamCount=4
Header=windows.h.api;
@=GetTapeParameters
[GetTapePosition]
1=HANDLE hDevice
2=DWORD dwPositionType
3=LPDWORD lpdwPartition
4=LPDWORD lpdwOffsetLow
5=LPDWORD lpdwOffsetHigh
ParamCount=5
Header=windows.h.api;
@=GetTapePosition
[GetTapeStatus]
1=HANDLE hDevice
ParamCount=1
Header=windows.h.api;
@=GetTapeStatus
[PrepareTape]
1=HANDLE hDevice
2=DWORD dwOperation
3=BOOL bImmediate
ParamCount=3
Header=windows.h.api;
@=PrepareTape
[SetTapeParameters]
1=HANDLE hDevice
2=DWORD dwOperation
3=LPVOID lpTapeInformation
ParamCount=3
Header=windows.h.api;
@=SetTapeParameters
[SetTapePosition]
1=HANDLE hDevice
2=DWORD dwPositionMethod
3=DWORD dwPartition
4=DWORD dwOffsetLow
5=DWORD dwOffsetHigh
6=BOOL bImmediate
ParamCount=6
Header=windows.h.api;
@=SetTapePosition
[WriteTapemark]
1=HANDLE hDevice
2=DWORD dwTapemarkType
3=DWORD dwTapemarkCount
4=BOOL bImmediate
ParamCount=4
Header=windows.h.api;
@=WriteTapemark
[ProcessIdToSessionId]
1=DWORD dwProcessId
2=DWORD* pSessionId
ParamCount=2
@=ProcessIdToSessionId
[WTSGetActiveConsoleSessionId]
ParamCount=0
@=WTSGetActiveConsoleSessionId
[GetSystemTime]
1=LPSYSTEMTIME lpSystemTime
ParamCount=1
Header=windows.h.api;
@=GetSystemTime
[GetSystemTimeAdjustment]
1=PDWORD lpTimeAdjustment
2=PDWORD lpTimeIncrement
3=PBOOL lpTimeAdjustmentDisabled
ParamCount=3
@=GetSystemTimeAdjustment
[SetSystemTime]
1=SYSTEMTIME* lpSystemTime
ParamCount=1
Header=windows.h.api;
@=SetSystemTime
[SetSystemTimeAdjustment]
1=DWORD dwTimeAdjustment
2=BOOL bTimeAdjustmentDisabled
ParamCount=2
@=SetSystemTimeAdjustment
[FileTimeToLocalFileTime]
1=FILETIME* lpFileTime
2=LPFILETIME lpLocalFileTime
ParamCount=2
Header=windows.h.api;
@=FileTimeToLocalFileTime
[GetDynamicTimeZoneInformation]
1=PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation
ParamCount=1
Header=kernel32.h.api;
@=GetDynamicTimeZoneInformation
[GetLocalTime]
1=LPSYSTEMTIME lpSystemTime
ParamCount=1
Header=windows.h.api;
@=GetLocalTime
[GetTimeZoneInformation]
1=LPTIME_ZONE_INFORMATION lpTimeZoneInformation
ParamCount=1
Header=windows.h.api;
@=GetTimeZoneInformation
[GetTimeZoneInformationForYear]
1=USHORT wYear
2=PDYNAMIC_TIME_ZONE_INFORMATION pdtzi
3=LPTIME_ZONE_INFORMATION ptzi
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=GetTimeZoneInformationForYear
[SetDynamicTimeZoneInformation]
1=DYNAMIC_TIME_ZONE_INFORMATION* lpTimeZoneInformation
ParamCount=1
Header=kernel32.h.api;
@=SetDynamicTimeZoneInformation
[SetLocalTime]
1=SYSTEMTIME* lpSystemTime
ParamCount=1
Header=windows.h.api;
@=SetLocalTime
[SetTimeZoneInformation]
1=TIME_ZONE_INFORMATION* lpTimeZoneInformation
ParamCount=1
Header=windows.h.api;
@=SetTimeZoneInformation
[SystemTimeToTzSpecificLocalTime]
1=LPTIME_ZONE_INFORMATION lpTimeZone
2=LPSYSTEMTIME lpUniversalTime
3=LPSYSTEMTIME lpLocalTime
ParamCount=3
Header=windows.h.api;
@=SystemTimeToTzSpecificLocalTime
[TzSpecificLocalTimeToSystemTime]
1=LPTIME_ZONE_INFORMATION lpTimeZoneInformation
2=LPSYSTEMTIME lpLocalTime
3=LPSYSTEMTIME lpUniversalTime
ParamCount=3
Header=windows.h.api;
@=TzSpecificLocalTimeToSystemTime
[CompareFileTime]
1=FILETIME* lpFileTime1
2=FILETIME* lpFileTime2
ParamCount=2
Header=windows.h.api;
@=CompareFileTime
[FileTimeToSystemTime]
1=FILETIME* lpFileTime
2=LPSYSTEMTIME lpSystemTime
ParamCount=2
Header=windows.h.api;
@=FileTimeToSystemTime
[GetFileTime]
1=HANDLE hFile
2=LPFILETIME lpCreationTime
3=LPFILETIME lpLastAccessTime
4=LPFILETIME lpLastWriteTime
ParamCount=4
Header=windows.h.api;
@=GetFileTime
[GetSystemTimeAsFileTime]
1=LPFILETIME lpSystemTimeAsFileTime
ParamCount=1
Header=windows.h.api;
@=GetSystemTimeAsFileTime
[GetSystemTimePreciseAsFileTime]
1=LPFILETIME lpSystemTimeAsFileTime
ParamCount=1
Header=windows.h.api;
@=GetSystemTimePreciseAsFileTime
[LocalFileTimeToFileTime]
1=FILETIME* lpLocalFileTime
2=LPFILETIME lpFileTime
ParamCount=2
Header=windows.h.api;
@=LocalFileTimeToFileTime
[SetFileTime]
1=HANDLE hFile
2=FILETIME* lpCreationTime
3=FILETIME* lpLastAccessTime
4=FILETIME* lpLastWriteTime
ParamCount=4
Header=windows.h.api;
@=SetFileTime
[SystemTimeToFileTime]
1=SYSTEMTIME* lpSystemTime
2=LPFILETIME lpFileTime
ParamCount=2
Header=windows.h.api;
@=SystemTimeToFileTime
[DosDateTimeToFileTime]
1=WORD wFatDate
2=WORD wFatTime
3=LPFILETIME lpFileTime
ParamCount=3
Header=windows.h.api;
@=DosDateTimeToFileTime
[FileTimeToDosDateTime]
1=FILETIME* lpFileTime
2=LPWORD lpFatDate
3=LPWORD lpFatTime
ParamCount=3
Header=windows.h.api;
@=FileTimeToDosDateTime
[GetSystemTimes]
1=LPFILETIME lpIdleTime
2=LPFILETIME lpKernelTime
3=LPFILETIME lpUserTime
ParamCount=3
Header=windows.h.api;
@=GetSystemTimes
[GetTickCount]
ParamCount=0
@=GetTickCount
[GetTickCount64]
ParamCount=0
@=GetTickCount64
[QueryPerformanceCounter]
1=LARGE_INTEGER* lpPerformanceCount
ParamCount=1
Header=windows.h.api;
@=QueryPerformanceCounter
[QueryPerformanceFrequency]
1=LARGE_INTEGER* lpFrequency
ParamCount=1
Header=windows.h.api;
@=QueryPerformanceFrequency
[IsDBCSLeadByte]
1=BYTE TestChar
ParamCount=1
@=IsDBCSLeadByte
[IsDBCSLeadByteEx]
1=[CodePageEnum] CodePage
2=BYTE TestChar
ParamCount=2
Header=windows.h.api;
@=IsDBCSLeadByteEx
[MultiByteToWideChar]
1=[CodePageEnum] CodePage
2=[MultiByteFlags] dwFlags
3=LPCSTR lpMultiByteStr
4=int cbMultiByte
5=LPWSTR lpWideCharStr
6=int cchWideChar
ParamCount=6
Header=kernel32.h.api;windows.h.api;
@=MultiByteToWideChar
[WideCharToMultiByte]
1=[CodePageEnum] CodePage
2=[WideCharFlags] dwFlags
3=LPCWSTR lpWideCharStr
4=int cchWideChar
5=LPSTR lpMultiByteStr
6=int cbMultiByte
7=LPCSTR lpDefaultChar
8=LPBOOL lpUsedDefaultChar
ParamCount=8
Header=kernel32.h.api;windows.h.api;
@=WideCharToMultiByte
[VerLanguageName]
1=DWORD wLang
2=LPTSTR szLang
3=DWORD cchLang
ParamCount=3
@=VerLanguageName
[RaiseFailFastException]
1=PEXCEPTION_RECORD pExceptionRecord
2=PCONTEXT pContextRecord
3=[FAIL_FAST_EXCEPTION_FLAGS] dwFlags
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=RaiseFailFastException
[WerGetFlags]
1=[ProcessHandle] hProcess
2=[WER_FAULT_REPORTING_FLAGS*] pdwFlags
ParamCount=2
Header=kernel32.h.api;windows.h.api;
@=WerGetFlags
[WerRegisterFile]
1=PCWSTR pwzFile
2=[WER_REGISTER_FILE_TYPE] regFileType
3=[WerFileFlags] dwFlags
ParamCount=3
Header=kernel32.h.api;
@=WerRegisterFile
[WerRegisterMemoryBlock]
1=PVOID pvAddress
2=DWORD dwSize
ParamCount=2
@=WerRegisterMemoryBlock
[WerRegisterRuntimeExceptionModule]
1=PCWSTR pwszOutOfProcessCallbackDll
2=PVOID pContext
ParamCount=2
@=WerRegisterRuntimeExceptionModule
[WerSetFlags]
1=[WER_FAULT_REPORTING_FLAGS] dwFlags
ParamCount=1
Header=kernel32.h.api;
@=WerSetFlags
[WerUnregisterFile]
1=PCWSTR pwzFilePath
ParamCount=1
@=WerUnregisterFile
[WerUnregisterMemoryBlock]
1=PVOID pvAddress
ParamCount=1
@=WerUnregisterMemoryBlock
[WerUnregisterRuntimeExceptionModule]
1=PCWSTR pwszOutOfProcessCallbackDll
2=PVOID pContext
ParamCount=2
@=WerUnregisterRuntimeExceptionModule
[CreateDirectory]
1=LPCTSTR lpPathName
2=LPSECURITY_ATTRIBUTES lpSecurityAttributes
ParamCount=2
Header=security.h.api;
@=CreateDirectory
[CreateDirectoryEx]
1=LPCTSTR lpTemplateDirectory
2=LPCTSTR lpNewDirectory
3=LPSECURITY_ATTRIBUTES lpSecurityAttributes
ParamCount=3
Header=security.h.api;
@=CreateDirectoryEx
[CreateDirectoryTransacted]
1=LPCTSTR lpTemplateDirectory
2=LPCTSTR lpNewDirectory
3=LPSECURITY_ATTRIBUTES lpSecurityAttributes
4=HANDLE hTransaction
ParamCount=4
Header=security.h.api;windows.h.api;
@=CreateDirectoryTransacted
[FindCloseChangeNotification]
1=HANDLE hChangeHandle
ParamCount=1
Header=windows.h.api;
@=FindCloseChangeNotification
[FindFirstChangeNotification]
1=LPCTSTR lpPathName
2=BOOL bWatchSubtree
3=[FILE_NOTIFY_CHANGE_FLAGS] dwNotifyFilter
ParamCount=3
Header=windows.h.api;
@=FindFirstChangeNotification
[FindNextChangeNotification]
1=HANDLE hChangeHandle
ParamCount=1
Header=windows.h.api;
@=FindNextChangeNotification
[GetCurrentDirectory]
1=DWORD nBufferLength
2=LPTSTR lpBuffer
ParamCount=2
@=GetCurrentDirectory
[ReadDirectoryChangesW]
1=HANDLE hDirectory
2=LPVOID lpBuffer
3=DWORD nBufferLength
4=BOOL bWatchSubtree
5=[FILE_NOTIFY_CHANGE_FLAGS] dwNotifyFilter
6=LPDWORD lpBytesReturned
7=LPOVERLAPPED lpOverlapped
8=LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
ParamCount=8
Header=kernel32.h.api;windows.h.api;
@=ReadDirectoryChangesW
[RemoveDirectory]
1=LPCTSTR lpPathName
ParamCount=1
@=RemoveDirectory
[RemoveDirectoryTransacted]
1=LPCTSTR lpPathName
2=HANDLE hTransaction
ParamCount=2
Header=windows.h.api;
@=RemoveDirectoryTransacted
[SetCurrentDirectory]
1=LPCTSTR lpPathName
ParamCount=1
@=SetCurrentDirectory
[GetDiskFreeSpace]
1=LPCTSTR lpRootPathName
2=LPDWORD lpSectorsPerCluster
3=LPDWORD lpBytesPerSector
4=LPDWORD lpNumberOfFreeClusters
5=LPDWORD lpTotalNumberOfClusters
ParamCount=5
@=GetDiskFreeSpace
[GetDiskFreeSpaceEx]
1=LPCTSTR lpDirectoryName
2=PULARGE_INTEGER lpFreeBytesAvailable
3=PULARGE_INTEGER lpTotalNumberOfBytes
4=PULARGE_INTEGER lpTotalNumberOfFreeBytes
ParamCount=4
Header=windows.h.api;
@=GetDiskFreeSpaceEx
[DefineDosDevice]
1=[DDD_FLAGS] dwFlags
2=LPCTSTR lpDeviceName
3=LPCTSTR lpTargetPath
ParamCount=3
Header=kernel32.h.api;
@=DefineDosDevice
[DeleteVolumeMountPoint]
1=LPCTSTR lpszVolumeMountPoint
ParamCount=1
@=DeleteVolumeMountPoint
[FindFirstVolume]
1=LPTSTR lpszVolumeName
2=DWORD cchBufferLength
ParamCount=2
@=FindFirstVolume
[FindNextVolume]
1=HANDLE hFindVolume
2=LPTSTR lpszVolumeName
3=DWORD cchBufferLength
ParamCount=3
Header=windows.h.api;
@=FindNextVolume
[FindNextVolumeMountPoint]
1=HANDLE hFindVolumeMountPoint
2=LPTSTR lpszVolumeMountPoint
3=DWORD cchBufferLength
ParamCount=3
Header=windows.h.api;
@=FindNextVolumeMountPoint
[FindVolumeClose]
1=HANDLE hFindVolume
ParamCount=1
Header=windows.h.api;
@=FindVolumeClose
[FindVolumeMountPointClose]
1=HANDLE hFindVolumeMountPoint
ParamCount=1
Header=windows.h.api;
@=FindVolumeMountPointClose
[GetDriveType]
1=LPCTSTR lpRootPathName
ParamCount=1
@=GetDriveType
[GetLogicalDrives]
ParamCount=0
@=GetLogicalDrives
[GetLogicalDriveStrings]
1=DWORD nBufferLength
2=LPTSTR lpBuffer
ParamCount=2
@=GetLogicalDriveStrings
[GetVolumeInformation]
1=LPCTSTR lpRootPathName
2=LPTSTR lpVolumeNameBuffer
3=DWORD nVolumeNameSize
4=LPDWORD lpVolumeSerialNumber
5=LPDWORD lpMaximumComponentLength
6=[LPFILE_SYSTEM_FLAGS] lpFileSystemFlags
7=LPTSTR lpFileSystemNameBuffer
8=DWORD nFileSystemNameSize
ParamCount=8
Header=kernel32.h.api;
@=GetVolumeInformation
[GetVolumeInformationByHandleW]
1=HANDLE hFile
2=LPTSTR lpVolumeNameBuffer
3=DWORD nVolumeNameSize
4=LPDWORD lpVolumeSerialNumber
5=LPDWORD lpMaximumComponentLength
6=[LPFILE_SYSTEM_FLAGS] lpFileSystemFlags
7=LPTSTR lpFileSystemNameBuffer
8=DWORD nFileSystemNameSize
ParamCount=8
Header=kernel32.h.api;windows.h.api;
@=GetVolumeInformationByHandleW
[GetVolumeNameForVolumeMountPoint]
1=LPCTSTR lpszVolumeMountPoint
2=LPTSTR lpszVolumeName
3=DWORD cchBufferLength
ParamCount=3
@=GetVolumeNameForVolumeMountPoint
[GetVolumePathName]
1=LPCTSTR lpszFileName
2=LPTSTR lpszVolumePathName
3=DWORD cchBufferLength
ParamCount=3
@=GetVolumePathName
[GetVolumePathNamesForVolumeName]
1=LPCTSTR lpszVolumeName
2=LPTSTR lpszVolumePathNames
3=DWORD cchBufferLength
4=PDWORD lpcchReturnLength
ParamCount=4
@=GetVolumePathNamesForVolumeName
[QueryDosDevice]
1=LPCTSTR lpDeviceName
2=LPTSTR lpTargetPath
3=DWORD ucchMax
ParamCount=3
@=QueryDosDevice
[SetVolumeLabel]
1=LPCTSTR lpRootPathName
2=LPCTSTR lpVolumeName
ParamCount=2
@=SetVolumeLabel
[FindFirstVolumeMountPoint]
1=LPTSTR lpszRootPathName
2=LPTSTR lpszVolumeMountPoint
3=DWORD cchBufferLength
ParamCount=3
@=FindFirstVolumeMountPoint
[SetVolumeMountPoint]
1=LPCTSTR lpszVolumeMountPoint
2=LPCTSTR lpszVolumeName
ParamCount=2
@=SetVolumeMountPoint
[CreatePipe]
1=PHANDLE hReadPipe
2=PHANDLE hWritePipe
3=LPSECURITY_ATTRIBUTES lpPipeAttributes
4=DWORD nSize
ParamCount=4
Header=security.h.api;windows.h.api;
@=CreatePipe
[CallNamedPipe]
1=LPCTSTR lpNamedPipeName
2=LPVOID lpInBuffer
3=DWORD nInBufferSize
4=LPVOID lpOutBuffer
5=DWORD nOutBufferSize
6=LPDWORD lpBytesRead
7=[NMPWAIT] nTimeOut
ParamCount=7
Header=kernel32.h.api;
@=CallNamedPipe
[ConnectNamedPipe]
1=HANDLE hNamedPipe
2=LPOVERLAPPED lpOverlapped
ParamCount=2
Header=windows.h.api;
@=ConnectNamedPipe
[CreateNamedPipe]
1=LPCTSTR lpName
2=[PIPE_ACCESS] dwOpenMode
3=[PIPE_MODE] dwPipeMode
4=DWORD nMaxInstances
5=DWORD nOutBufferSize
6=DWORD nInBufferSize
7=DWORD nDefaultTimeOut
8=LPSECURITY_ATTRIBUTES lpSecurityAttributes
ParamCount=8
Header=kernel32.h.api;security.h.api;
@=CreateNamedPipe
[DisconnectNamedPipe]
1=HANDLE hNamedPipe
ParamCount=1
Header=windows.h.api;
@=DisconnectNamedPipe
[GetNamedPipeClientComputerName]
1=HANDLE Pipe
2=LPTSTR ClientComputerName
3=ULONG ClientComputerNameLength
ParamCount=3
Header=windows.h.api;
@=GetNamedPipeClientComputerName
[GetNamedPipeClientProcessId]
1=HANDLE Pipe
2=PULONG ClientProcessId
ParamCount=2
Header=windows.h.api;
@=GetNamedPipeClientProcessId
[GetNamedPipeClientSessionId]
1=HANDLE Pipe
2=PULONG ClientSessionId
ParamCount=2
Header=windows.h.api;
@=GetNamedPipeClientSessionId
[GetNamedPipeHandleState]
1=HANDLE hNamedPipe
2=[PIPE_STATE*] lpState
3=LPDWORD lpCurInstances
4=LPDWORD lpMaxCollectionCount
5=LPDWORD lpCollectDataTimeout
6=LPTSTR lpUserName
7=DWORD nMaxUserNameSize
ParamCount=7
Header=kernel32.h.api;windows.h.api;
@=GetNamedPipeHandleState
[GetNamedPipeInfo]
1=HANDLE hNamedPipe
2=[PIPE_TYPE*] lpFlags
3=LPDWORD lpOutBufferSize
4=LPDWORD lpInBufferSize
5=LPDWORD lpMaxInstances
ParamCount=5
Header=kernel32.h.api;windows.h.api;
@=GetNamedPipeInfo
[GetNamedPipeServerProcessId]
1=HANDLE Pipe
2=PULONG ServerProcessId
ParamCount=2
Header=windows.h.api;
@=GetNamedPipeServerProcessId
[GetNamedPipeServerSessionId]
1=HANDLE Pipe
2=PULONG ServerSessionId
ParamCount=2
Header=windows.h.api;
@=GetNamedPipeServerSessionId
[PeekNamedPipe]
1=HANDLE hNamedPipe
2=LPVOID lpBuffer
3=DWORD nBufferSize
4=LPDWORD lpBytesRead
5=LPDWORD lpTotalBytesAvail
6=LPDWORD lpBytesLeftThisMessage
ParamCount=6
Header=windows.h.api;
@=PeekNamedPipe
[SetNamedPipeHandleState]
1=HANDLE hNamedPipe
2=[PIPE_MODE*] lpMode
3=LPDWORD lpMaxCollectionCount
4=LPDWORD lpCollectDataTimeout
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=SetNamedPipeHandleState
[TransactNamedPipe]
1=HANDLE hNamedPipe
2=LPVOID lpInBuffer
3=DWORD nInBufferSize
4=LPVOID lpOutBuffer
5=DWORD nOutBufferSize
6=LPDWORD lpBytesRead
7=LPOVERLAPPED lpOverlapped
ParamCount=7
Header=windows.h.api;
@=TransactNamedPipe
[WaitNamedPipe]
1=LPCTSTR lpNamedPipeName
2=[NMPWAIT] nTimeOut
ParamCount=2
Header=kernel32.h.api;
@=WaitNamedPipe
[DisableThreadProfiling]
1=HANDLE PerformanceDataHandle
ParamCount=1
Header=windows.h.api;
@=DisableThreadProfiling
[EnableThreadProfiling]
1=[ThreadHandle] ThreadHandle
2=[THREAD_PROFILING_FLAGS] Flags
3=DWORD64 HardwareCounters
4=HANDLE PerformanceDataHandle
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=EnableThreadProfiling
[QueryThreadProfiling]
1=[ThreadHandle] ThreadHandle
2=PBOOLEAN Enabled
ParamCount=2
Header=windows.h.api;
@=QueryThreadProfiling
[ReadThreadProfilingData]
1=HANDLE PerformanceDataHandle
2=[READ_THREAD_PROFILING_FLAGS] Flags
3=PPERFORMANCE_DATA PerformanceData
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=ReadThreadProfilingData
[BaseFormatTimeOut]
1=LARGE_INTEGER* pLITimeout
2=DWORD dwMillis
ParamCount=2
Header=windows.h.api;
@=BaseFormatTimeOut
[BaseGetNamedObjectDirectory]
1=HANDLE* phDir
ParamCount=1
Header=windows.h.api;
@=BaseGetNamedObjectDirectory
[Basep8BitStringToDynamicUnicodeString]
1=PUNICODE_STRING pConvertedStr
2=LPCSTR pszAnsiStr
ParamCount=2
Header=windows.h.api;
@=Basep8BitStringToDynamicUnicodeString
[CheckElevationEnabled]
1=BOOL* pResult
ParamCount=1
@=CheckElevationEnabled
[ConsoleMenuControl]
1=HANDLE hConOut
2=DWORD cmdIdLow
3=DWORD cmdIdHigh
ParamCount=3
Header=windows.h.api;
@=ConsoleMenuControl
[SetConsoleCursor]
1=HANDLE hConsole
2=HCURSOR hCursor
ParamCount=2
Header=gdi.h.api;windows.h.api;
@=SetConsoleCursor
[SetConsoleMaximumWindowSize]
1=HANDLE hConsole
2=DWORD dwUnk
ParamCount=2
Header=windows.h.api;
@=SetConsoleMaximumWindowSize
[SetStdHandleEx]
1=[StdHandle] dwStdHandle
2=HANDLE hNewHandle
3=HANDLE* phOldHandle
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=SetStdHandleEx
[ShowConsoleCursor]
1=HANDLE hConsoleOutput
2=BOOL bShow
ParamCount=2
Header=windows.h.api;
@=ShowConsoleCursor
[AddLocalAlternateComputerName]
1=LPCTSTR lpDnsFQHostname
2=ULONG ulFlags
ParamCount=2
@=AddLocalAlternateComputerName
[DelayLoadFailureHook]
1=LPCSTR pszDllName
2=LPCSTR pszProcName
ParamCount=2
@=DelayLoadFailureHook
[ResolveDelayLoadedAPI]
1=HMODULE-PVOID ParentModuleBase
2=PCIMAGE_DELAYLOAD_DESCRIPTOR DelayloadDescriptor
3=PDELAYLOAD_FAILURE_DLL_CALLBACK FailureDllHook
4=PDELAYLOAD_FAILURE_SYSTEM_ROUTINE FailureSystemHook
5=PIMAGE_THUNK_DATA ThunkAddress
6=ULONG Flags
ParamCount=6
Header=kernel32.h.api;
@=ResolveDelayLoadedAPI
[ResolveDelayLoadsFromDll]
1=[HMODULE-PVOID] ParentBase
2=LPCSTR TargetDllName
3=ULONG Flags
ParamCount=3
@=ResolveDelayLoadsFromDll
[DecodePointer]
1=PVOID Ptr
ParamCount=1
@=DecodePointer
[DecodeSystemPointer]
1=PVOID Ptr
ParamCount=1
@=DecodeSystemPointer
[EncodePointer]
1=PVOID Ptr
ParamCount=1
@=EncodePointer
[EncodeSystemPointer]
1=PVOID Ptr
ParamCount=1
@=EncodeSystemPointer
[MulDiv]
1=int nNumber
2=int nNumerator
3=int nDenominator
ParamCount=3
@=MulDiv
[CheckTokenCapability]
1=HANDLE TokenHandle
2=PSID CapabilitySidToCheck
3=PBOOL HasCapability
ParamCount=3
Header=windows.h.api;
@=CheckTokenCapability
[CheckTokenMembershipEx]
1=HANDLE TokenHandle
2=PSID SidToCheck
3=[CTM_FLAGS] Flags
4=PBOOL IsMember
ParamCount=4
Header=kernel32.h.api;windows.h.api;
@=CheckTokenMembershipEx
[AddResourceAttributeAce]
1=PACL pAcl
2=DWORD dwAceRevision
3=[AceFlags] AceFlags
4=[ACCESS_MASK_DWORD] AccessMask
5=PSID pSid
6=PCLAIM_SECURITY_ATTRIBUTES_INFORMATION pAttributeInfo
7=PDWORD pReturnLength
ParamCount=7
Header=kernel32.h.api;security.h.api;windows.h.api;
@=AddResourceAttributeAce
[AddScopedPolicyIDAce]
1=PACL pAcl
2=DWORD dwAceRevision
3=[AceFlags] AceFlags
4=[ACCESS_MASK_DWORD] AccessMask
5=PSID pSid
ParamCount=5
Header=security.h.api;windows.h.api;
@=AddScopedPolicyIDAce
[ClosePackageInfo]
1=PACKAGE_INFO_REFERENCE packageInfoReference
ParamCount=1
Header=kernel32.h.api;
@=ClosePackageInfo
[GetApplicationUserModelId]
1=HANDLE hProcess
2=UINT32* applicationUserModelIdLength
3=PWSTR applicationUserModelId
ParamCount=3
Header=windows.h.api;
@=GetApplicationUserModelId
[GetCurrentApplicationUserModelId]
1=UINT32* applicationUserModelIdLength
2=PWSTR applicationUserModelId
ParamCount=2
@=GetCurrentApplicationUserModelId
[GetCurrentPackageFamilyName]
1=UINT32* packageFamilyNameLength
2=PWSTR packageFamilyName
ParamCount=2
@=GetCurrentPackageFamilyName
[GetCurrentPackageFullName]
1=UINT32* packageFullNameLength
2=PWSTR packageFullName
ParamCount=2
@=GetCurrentPackageFullName
[GetCurrentPackageId]
1=UINT32* bufferLength
2=BYTE* buffer
ParamCount=2
@=GetCurrentPackageId
[GetCurrentPackageInfo]
1=[PACKAGE_FILTER_FLAGS] flags
2=UINT32* bufferLength
3=BYTE* buffer
4=UINT32* count
ParamCount=4
@=GetCurrentPackageInfo
[GetCurrentPackagePath]
1=UINT32* pathLength
2=PWSTR path
ParamCount=2
@=GetCurrentPackagePath
[GetPackageFamilyName]
1=HANDLE hProcess
2=UINT32* packageFamilyNameLength
3=PWSTR packageFamilyName
ParamCount=3
Header=windows.h.api;
@=GetPackageFamilyName
[GetPackageFullName]
1=HANDLE hProcess
2=UINT32* packageFullNameLength
3=PWSTR packageFullName
ParamCount=3
Header=windows.h.api;
@=GetPackageFullName
[GetPackageId]
1=HANDLE hProcess
2=UINT32* bufferLength
3=BYTE* pBuffer
ParamCount=3
Header=windows.h.api;
@=GetPackageId
[GetPackageInfo]
1=PACKAGE_INFO_REFERENCE packageInfoReference
2=PACKAGE_CONSTANTS flags
3=UINT32* bufferLength
4=BYTE* buffer
5=UINT32* count
ParamCount=5
Header=kernel32.h.api;
@=GetPackageInfo
[GetPackagePath]
1=const PACKAGE_ID* packageId
2=UINT32 reserved
3=UINT32* pathLength
4=PWSTR path
ParamCount=4
Header=kernel32.h.api;
@=GetPackagePath
[GetPackagesByPackageFamily]
1=PWSTR packageFamilyName
2=UINT32* count
3=PWSTR* packageFullNames
4=UINT32* bufferLength
5=WCHAR* buffer
ParamCount=5
@=GetPackagesByPackageFamily
[OpenPackageInfoByFullName]
1=PCWSTR packageFullName
2=UINT32 reserved
3=PACKAGE_INFO_REFERENCE* packageInfoReference
ParamCount=3
Header=kernel32.h.api;
@=OpenPackageInfoByFullName
[PackageFamilyNameFromFullName]
1=PCWSTR packageFullName
2=UINT32* packageFamilyNameLength
3=PWSTR packageFamilyName
ParamCount=3
@=PackageFamilyNameFromFullName
[PackageFamilyNameFromId]
1=const PACKAGE_ID* packageId
2=UINT32* packageFamilyNameLength
3=PWSTR packageFamilyName
ParamCount=3
@=PackageFamilyNameFromId
[PackageFullNameFromId]
1=const PACKAGE_ID* packageId
2=UINT32* packageFullNameLength
3=PWSTR packageFullName
ParamCount=3
@=PackageFullNameFromId
[PackageIdFromFullName]
1=PCWSTR packageFullName
2=[PACKAGE_INFORMATION_FLAGS] flags
3=UINT32* bufferLength
4=BYTE* buffer
ParamCount=4
@=PackageIdFromFullName
[PackageNameAndPublisherIdFromFamilyName]
1=PCWSTR packageFamilyName
2=UINT32* packageNameLength
3=PWSTR packageName
4=UINT32* packagePublisherIdLength
5=PWSTR packagePublisherId
ParamCount=5
@=PackageNameAndPublisherIdFromFamilyName
[K32EmptyWorkingSet]
1=[ProcessHandle] hProcess
ParamCount=1
Header=windows.h.api;
@=K32EmptyWorkingSet
[K32EnumDeviceDrivers]
1=LPVOID* lpImageBase
2=DWORD cb
3=LPDWORD lpcbNeeded
ParamCount=3
@=K32EnumDeviceDrivers
[K32EnumPageFiles]
1=PENUM_PAGE_CALLBACK pCallbackRoutine
2=LPVOID lpContext
ParamCount=2
Header=processes.h.api;
@=K32EnumPageFiles
[K32EnumProcesses]
1=DWORD* pProcessIds
2=DWORD cb
3=DWORD* pBytesReturned
ParamCount=3
@=K32EnumProcesses
[K32EnumProcessModules]
1=[ProcessHandle] hProcess
2=HMODULE* lphModule
3=DWORD cb
4=LPDWORD lpcbNeeded
ParamCount=4
Header=windows.h.api;
@=K32EnumProcessModules
[K32EnumProcessModulesEx]
1=[ProcessHandle] hProcess
2=HMODULE* lphModule
3=DWORD cb
4=LPDWORD lpcbNeeded
5=DWORD dwFilterFlag
ParamCount=5
Header=windows.h.api;
@=K32EnumProcessModulesEx
[K32GetDeviceDriverBaseName]
1=LPVOID ImageBase
2=LPTSTR lpBaseName
3=DWORD nSize
ParamCount=3
@=K32GetDeviceDriverBaseName
[K32GetDeviceDriverFileName]
1=LPVOID ImageBase
2=LPTSTR lpFilename
3=DWORD nSize
ParamCount=3
@=K32GetDeviceDriverFileName
[K32GetMappedFileName]
1=[ProcessHandle] hProcess
2=LPVOID lpv
3=LPTSTR lpFilename
4=DWORD nSize
ParamCount=4
Header=windows.h.api;
@=K32GetMappedFileName
[K32GetModuleBaseName]
1=[ProcessHandle] hProcess
2=HMODULE hModule
3=LPTSTR lpBaseName
4=DWORD nSize
ParamCount=4
Header=windows.h.api;
@=K32GetModuleBaseName
[K32GetModuleFileNameEx]
1=[ProcessHandle] hProcess
2=HMODULE hModule
3=LPTSTR lpFilename
4=DWORD nSize
ParamCount=4
Header=windows.h.api;
@=K32GetModuleFileNameEx
[K32GetModuleInformation]
1=[ProcessHandle] hProcess
2=HMODULE hModule
3=LPMODULEINFO lpmodinfo
4=DWORD cb
ParamCount=4
Header=processes.h.api;windows.h.api;
@=K32GetModuleInformation
[K32GetPerformanceInfo]
1=PPERFORMANCE_INFORMATION pPerformanceInformation
2=DWORD cb
ParamCount=2
Header=processes.h.api;
@=K32GetPerformanceInfo
[K32GetProcessImageFileName]
1=[ProcessHandle] hProcess
2=LPTSTR lpImageFileName
3=DWORD nSize
ParamCount=3
Header=windows.h.api;
@=K32GetProcessImageFileName
[K32GetProcessMemoryInfo]
1=HANDLE Process
2=PPROCESS_MEMORY_COUNTERS ppsmemCounters
3=DWORD cb
ParamCount=3
Header=processes.h.api;windows.h.api;
@=K32GetProcessMemoryInfo
[K32GetWsChanges]
1=[ProcessHandle] hProcess
2=PPSAPI_WS_WATCH_INFORMATION lpWatchInfo
3=DWORD cb
ParamCount=3
Header=processes.h.api;windows.h.api;
@=K32GetWsChanges
[K32GetWsChangesEx]
1=[ProcessHandle] hProcess
2=PPSAPI_WS_WATCH_INFORMATION_EX lpWatchInfoEx
3=DWORD cb
ParamCount=3
Header=processes.h.api;windows.h.api;
@=K32GetWsChangesEx
[K32InitializeProcessForWsWatch]
1=[ProcessHandle] hProcess
ParamCount=1
Header=windows.h.api;
@=K32InitializeProcessForWsWatch
[K32QueryWorkingSet]
1=[ProcessHandle] hProcess
2=PVOID pv
3=DWORD cb
ParamCount=3
Header=windows.h.api;
@=K32QueryWorkingSet
[K32QueryWorkingSetEx]
1=[ProcessHandle] hProcess
2=PVOID pv
3=DWORD cb
ParamCount=3
Header=windows.h.api;
@=K32QueryWorkingSetEx
[EnumUILanguages]
1=UILANGUAGE_ENUMPROC lpUILanguageEnumProc
2=[EnumUILanguages_FLAGS] dwFlags
3=LONG_PTR lParam
ParamCount=3
Header=kernel32.h.api;
@=EnumUILanguages
[GetFileMUIInfo]
1=[GetFileMUIInfo_FLAGS] dwFlags
2=PCWSTR pcwszFilePath
3=PFILEMUIINFO pFileMUIInfo
4=DWORD* pcbFileMUIInfo
ParamCount=4
Header=kernel32.h.api;
@=GetFileMUIInfo
[GetFileMUIPath]
1=DWORD dwFlags
2=PCWSTR pcwszFilePath
3=PWSTR pwszLanguage
4=PULONG pcchLanguage
5=PWSTR pwszFileMUIPath
6=PULONG pcchFileMUIPath
7=PULONGLONG pululEnumerator
ParamCount=7
@=GetFileMUIPath
[GetProcessPreferredUILanguages]
1=[MUI_LANGUAGE_FORMAT_FLAGS] dwFlags
2=PULONG pulNumLanguages
3=PZZWSTR pwszLanguagesBuffer
4=PULONG pcchLanguagesBuffer
ParamCount=4
Header=kernel32.h.api;
@=GetProcessPreferredUILanguages
[GetSystemDefaultUILanguage]
ParamCount=0
@=GetSystemDefaultUILanguage
[GetSystemPreferredUILanguages]
1=[GetSystemPreferredUILanguages_FLAGS] dwFlags
2=PULONG pulNumLanguages
3=PZZWSTR pwszLanguagesBuffer
4=PULONG pcchLanguagesBuffer
ParamCount=4
Header=kernel32.h.api;
@=GetSystemPreferredUILanguages
[GetThreadPreferredUILanguages]
1=[GetThreadPreferredUILanguages_FLAGS] dwFlags
2=PULONG pulNumLanguages
3=PZZWSTR pwszLanguagesBuffer
4=PULONG pcchLanguagesBuffer
ParamCount=4
Header=kernel32.h.api;
@=GetThreadPreferredUILanguages
[GetThreadUILanguage]
ParamCount=0
@=GetThreadUILanguage
[GetUILanguageInfo]
1=[MUI_LANGUAGE_FORMAT_FLAGS] dwFlags
2=PCZZWSTR pwmszLanguage
3=PZZWSTR pwszFallbackLanguages
4=PDWORD pcchFallbackLanguages
5=[MUI_LANGUAGE_ATTRIBUTES*] pdwAttributes
ParamCount=5
Header=kernel32.h.api;
@=GetUILanguageInfo
[GetUserDefaultUILanguage]
ParamCount=0
@=GetUserDefaultUILanguage
[GetUserPreferredUILanguages]
1=[MUI_LANGUAGE_FORMAT_FLAGS] dwFlags
2=PULONG pulNumLanguages
3=PZZWSTR pwszLanguagesBuffer
4=PULONG pcchLanguagesBuffer
ParamCount=4
Header=kernel32.h.api;
@=GetUserPreferredUILanguages
[SetProcessPreferredUILanguages]
1=[MUI_LANGUAGE_FORMAT_FLAGS] dwFlags
2=PCZZWSTR pwszLanguagesBuffer
3=PULONG pulNumLanguages
ParamCount=3
Header=kernel32.h.api;
@=SetProcessPreferredUILanguages
[SetThreadPreferredUILanguages]
1=[SetThreadPreferredUILanguages_FLAGS] dwFlags
2=PCZZWSTR pwszLanguagesBuffer
3=PULONG pulNumLanguages
ParamCount=3
Header=kernel32.h.api;
@=SetThreadPreferredUILanguages
[SetThreadUILanguage]
1=[LANGID] LangId
ParamCount=1
Header=windows.h.api;
@=SetThreadUILanguage
[CopyContext]
1=PCONTEXT Destination
2=DWORD ContextFlags
3=PCONTEXT Source
ParamCount=3
Header=windows.h.api;
@=CopyContext
[GetEnabledXStateFeatures]
ParamCount=0
@=GetEnabledXStateFeatures
[GetXStateFeaturesMask]
1=PCONTEXT Context
2=[XSTATE_MASK*] FeatureMask
ParamCount=2
Header=windows.h.api;
@=GetXStateFeaturesMask
[InitializeContext]
1=PVOID Buffer
2=DWORD ContextFlags
3=PCONTEXT* Context
4=PWORD ContextLength
ParamCount=4
Header=windows.h.api;
@=InitializeContext
[LocateXStateFeature]
1=PCONTEXT Context
2=[XSTATE_FEATURE] FeatureId
3=PDWORD Length
ParamCount=3
Header=kernel32.h.api;windows.h.api;
@=LocateXStateFeature
[SetXStateFeaturesMask]
1=PCONTEXT Context
2=[XSTATE_MASK] FeatureMask
ParamCount=2
Header=windows.h.api;
@=SetXStateFeaturesMask
[CheckElevation]
1=LPCWSTR lpApplicationName
2=PDWORD pdwFlags
3=HANDLE hChildToken
4=PDWORD pdwRunLevel
5=PDWORD pdwReason
ParamCount=5
Header=windows.h.api;
@=CheckElevation
[RegCloseKey]
SourceModule=advapi32.api
@=RegCloseKey
[RegCreateKeyExA]
SourceModule=advapi32.api
@=RegCreateKeyExA
[RegCreateKeyExW]
SourceModule=advapi32.api
@=RegCreateKeyExW
[RegDeleteKeyExA]
SourceModule=advapi32.api
@=RegDeleteKeyExA
[RegDeleteKeyExW]
SourceModule=advapi32.api
@=RegDeleteKeyExW
[RegDeleteTreeA]
SourceModule=advapi32.api
@=RegDeleteTreeA
[RegDeleteTreeW]
SourceModule=advapi32.api
@=RegDeleteTreeW
[RegDeleteValueA]
SourceModule=advapi32.api
@=RegDeleteValueA
[RegDeleteValueW]
SourceModule=advapi32.api
@=RegDeleteValueW
[RegDisablePredefinedCacheEx]
SourceModule=advapi32.api
@=RegDisablePredefinedCacheEx
[RegEnumKeyExA]
SourceModule=advapi32.api
@=RegEnumKeyExA
[RegEnumKeyExW]
SourceModule=advapi32.api
@=RegEnumKeyExW
[RegEnumValueA]
SourceModule=advapi32.api
@=RegEnumValueA
[RegEnumValueW]
SourceModule=advapi32.api
@=RegEnumValueW
[RegFlushKey]
SourceModule=advapi32.api
@=RegFlushKey
[RegGetValueA]
SourceModule=advapi32.api
@=RegGetValueA
[RegGetValueW]
SourceModule=advapi32.api
@=RegGetValueW
[RegLoadKeyA]
SourceModule=advapi32.api
@=RegLoadKeyA
[RegLoadKeyW]
SourceModule=advapi32.api
@=RegLoadKeyW
[RegLoadMUIStringA]
SourceModule=advapi32.api
@=RegLoadMUIStringA
[RegLoadMUIStringW]
SourceModule=advapi32.api
@=RegLoadMUIStringW
[RegNotifyChangeKeyValue]
SourceModule=advapi32.api
@=RegNotifyChangeKeyValue
[RegOpenCurrentUser]
SourceModule=advapi32.api
@=RegOpenCurrentUser
[RegOpenKeyExA]
SourceModule=advapi32.api
@=RegOpenKeyExA
[RegOpenKeyExW]
SourceModule=advapi32.api
@=RegOpenKeyExW
[RegOpenUserClassesRoot]
SourceModule=advapi32.api
@=RegOpenUserClassesRoot
[RegQueryInfoKeyA]
SourceModule=advapi32.api
@=RegQueryInfoKeyA
[RegQueryInfoKeyW]
SourceModule=advapi32.api
@=RegQueryInfoKeyW
[RegQueryValueExA]
SourceModule=advapi32.api
@=RegQueryValueExA
[RegQueryValueExW]
SourceModule=advapi32.api
@=RegQueryValueExW
[RegRestoreKeyA]
SourceModule=advapi32.api
@=RegRestoreKeyA
[RegRestoreKeyW]
SourceModule=advapi32.api
@=RegRestoreKeyW
[RegSaveKeyExA]
SourceModule=advapi32.api
@=RegSaveKeyExA
[RegSaveKeyExW]
SourceModule=advapi32.api
@=RegSaveKeyExW
[RegSetValueExA]
SourceModule=advapi32.api
@=RegSetValueExA
[RegSetValueExW]
SourceModule=advapi32.api
@=RegSetValueExW
[RegUnLoadKeyA]
SourceModule=advapi32.api
@=RegUnLoadKeyA
[RegUnLoadKeyW]
SourceModule=advapi32.api
@=RegUnLoadKeyW
[RegGetKeySecurity]
SourceModule=advapi32.api
@=RegGetKeySecurity
[RegSetKeySecurity]
SourceModule=advapi32.api
@=RegSetKeySecurity
[CreateProcessAsUserA]
SourceModule=advapi32.api
@=CreateProcessAsUserA
[CreateProcessAsUserW]
SourceModule=advapi32.api
@=CreateProcessAsUserW
[CopyLZFile]
SourceModule=lz32.api
@=CopyLZFile
[GetExpandedNameA]
SourceModule=lz32.api
@=GetExpandedNameA
[GetExpandedNameW]
SourceModule=lz32.api
@=GetExpandedNameW
[LZClose]
SourceModule=lz32.api
@=LZClose
[LZCloseFile]
SourceModule=lz32.api
@=LZCloseFile
[LZCopy]
SourceModule=lz32.api
@=LZCopy
[LZCreateFileW]
SourceModule=lz32.api
@=LZCreateFileW
[LZDone]
SourceModule=lz32.api
@=LZDone
[LZInit]
SourceModule=lz32.api
@=LZInit
[LZOpenFileA]
SourceModule=lz32.api
@=LZOpenFileA
[LZOpenFileW]
SourceModule=lz32.api
@=LZOpenFileW
[LZRead]
SourceModule=lz32.api
@=LZRead
[LZSeek]
SourceModule=lz32.api
@=LZSeek
[LZStart]
SourceModule=lz32.api
@=LZStart
